自己定义异常处理-把错误写到自定义的文件

1：捕获异常
在Asp.net MVC中提供了一个全局的异常处理的过滤器：HandleErrorAttribute，可以通过该过滤器捕获异常信息。

需要在Global文件中调用的RegisterGlobalFilters方法中完成自己定义异常处理过滤的注册。

在App_Start文件夹下面吧原来的HanleErrorAttribute注掉，换成自己的MyexceptionAttribute
public class FilterConfig
    {
        public static void RegisterGlobalFilters(GlobalFilterCollection filters)
        {
           // filters.Add(new HandleErrorAttribute());
            filters.Add(new MyExceptionAttribute());
        }
    }
在Model下面创建类MyExceptionAttribute
	捕获异常信息。
	 public class MyExceptionAttribute : HandleErrorAttribute
    {
        /// <summary>
        /// 可以捕获异常数据
        /// </summary>
        /// <param name="filterContext"></param>
        public override void OnException(ExceptionContext filterContext)
        {
            base.OnException(filterContext);
            Exception ex = filterContext.Exception;
            //写到日志中.多个线程同时操作一个文件，造成文件的并发。所以不能直接写到日志当中
        }
    }
思考：怎样解决？加线程锁？	
	
2：将异常信息写到日志。修改MyExceptionAttribute类
    public class MyExceptionAttribute : HandleErrorAttribute
    {
        public static Queue<Exception> ExecptionQueue = new Queue<Exception>();
        /// <summary>
        /// 可以捕获异常数据
        /// </summary>
        /// <param name="filterContext"></param>
        public override void OnException(ExceptionContext filterContext)
        {
          
            base.OnException(filterContext);
            Exception ex = filterContext.Exception;
            //写到队列
            ExecptionQueue.Enqueue(ex);
            //跳转到错误页面.
            filterContext.HttpContext.Response.Redirect("/Error.html");
        }
    }
		
   注意在Global文件中的Application_Start方法中开启一个线程。
		
            //开启一个线程，扫描异常信息队列。
            string filePath = Server.MapPath("/Log/");//把文件写在logwen文件夹里，声明一个路径
            ThreadPool.QueueUserWorkItem((a) => {//ThreadPool.QueueUserWorkItem(WaitCallBack)是用来把方法放在WaitCallBack队列里面，等待执行。这里重载掉了WaitCallBack，用while(true)让这个循环一直跑，然后一直看队列里面有没有东西，有的话就写在日志文件中。
                while (true)
                {
                    //判断一下队列中是否有数据
                    if (MyExceptionAttribute.ExecptionQueue.Count() > 0)
                    {
                        Exception ex=MyExceptionAttribute.ExecptionQueue.Dequeue();
                        if (ex != null)
                        {
                            //将异常信息写到日志文件中。
                            string fileName = DateTime.Now.ToString("yyyy-MM-dd");
                            File.AppendAllText(filePath+fileName+".txt",ex.ToString(),System.Text.Encoding.UTF8);
                            //ILog logger = LogManager.GetLogger("errorMsg");
                            //logger.Error(ex.ToString());
                        }
                        else
                        {
                            //如果队列中没有数据，休息
                            Thread.Sleep(3000);
                        }
                    }
                    else
                    {
                        //如果队列中没有数据，休息
                        Thread.Sleep(3000);
                    }
                }
            
            
            },filePath);


3：跳转到错误页面。
