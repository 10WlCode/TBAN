<!DOCTYPE html>
<!-- saved from url=(0100)https://codedaily.io/tutorials/1/Maintain-Touchable-Items-with-a-Parent-PanResponder-in-React-Native -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title class="next-head">Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native</title><meta name="viewport" content="initial-scale=1.0, width=device-width" class="next-head"><meta name="twitter:card" content="summary_large_image" class="next-head"><meta name="twitter:site" content="@codedailyio" class="next-head"><meta name="twitter:title" content="Maintain Touchable Items with a Parent PanResponder in React Native" class="next-head"><meta name="twitter:image" content="https://i.imgur.com/r1eZgLn.gif" class="next-head"><meta name="twitter:description" content="## What Are We Building

![https://i.imgur.com/r1eZgLn.gif](https://i.imgur.com/r1eZgLn.gif)
## Intro

One of the issues I&#39;ve noticed with PanResponder is that people assume it is an all or nothing. 
By that I mean adding a PanResponder in a parent view means it will steal all of your touches and `Touchable` items won&#39;t be touchable any longer.

You may be running into this because you copy and pasted it from here the documentation here [https://facebook.github.io/react-native/docs/panresponder.html](https://facebook.github.io/react-native/docs/panresponder.html) and it includes a capture phase returning true.
(I copy and paste this all the time).
We&#39;ll talk about the capture phase next.
" class="next-head"><meta name="twitter:creator" content="@codedailyio" class="next-head"><meta name="og:type" content="article" class="next-head"><meta property="og:title" content="Maintain Touchable Items with a Parent PanResponder in React Native" class="next-head"><meta property="og:type" content="article" class="next-head"><meta property="og:url" content="https://codedaily.io/tutorials/1/Maintain-Touchable-Items-with-a-Parent-PanResponder-in-React-Native" class="next-head"><meta property="og:image" content="https://i.imgur.com/r1eZgLn.gif" class="next-head"><meta property="og:image:width" content="600" class="next-head"><meta property="og:image:height" content="600" class="next-head"><meta property="og:description" content="## What Are We Building

![https://i.imgur.com/r1eZgLn.gif](https://i.imgur.com/r1eZgLn.gif)
## Intro

One of the issues I&#39;ve noticed with PanResponder is that people assume it is an all or nothing. 
By that I mean adding a PanResponder in a parent view means it will steal all of your touches and `Touchable` items won&#39;t be touchable any longer.

You may be running into this because you copy and pasted it from here the documentation here [https://facebook.github.io/react-native/docs/panresponder.html](https://facebook.github.io/react-native/docs/panresponder.html) and it includes a capture phase returning true.
(I copy and paste this all the time).
We&#39;ll talk about the capture phase next.
" class="next-head"><meta property="og:site_name" content="Code Daily" class="next-head"><meta property="article:published_time" content="2017-03-02T06:27:24.668Z" class="next-head"><meta property="article:modified_time" content="" class="next-head"><meta property="article:section" content="" class="next-head"><meta property="article:tag" content="" class="next-head"><link rel="preload" href="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/tutorial.js" as="script"><link rel="preload" href="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/_app.js" as="script"><link rel="preload" href="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/_error.js" as="script"><link rel="preload" href="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/webpack-42652fa8b82c329c0559.js" as="script"><link rel="preload" href="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/commons.77ab52d20c6ac164de9c.js" as="script"><link rel="preload" href="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/main-ad5bf7ed917e35cbacf3.js" as="script"><style>.side-bar-placement .default-title{color:#222;display:block;-webkit-text-decoration:none;text-decoration:none;}.side-bar-placement .default-description{color:#222;font-weight:300;}.carbon-text{color:#222;display:block;-webkit-text-decoration:none;text-decoration:none;}.carbon-poweredby{color:#222;font-weight:300;-webkit-text-decoration:none;text-decoration:none;}.carbon-poweredby:hover,.carbon-text:hover{-webkit-text-decoration:underline;text-decoration:underline;}.css-q7ikx9{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:15px;color:#FFF;background:#171718;position:relative;}@media (max-width:768px){.css-q7ikx9{-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}}.css-ydkf2t{display:none;position:absolute;left:15px;top:15px;}@media (max-width:768px){.css-ydkf2t{display:inline-block;}}.css-cn364u{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-self:center;-ms-flex-item-align:center;align-self:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;position:relative;}.css-1mra26b{padding:3px 45px;-webkit-transition:all ease .3s;transition:all ease .3s;cursor:pointer;-webkit-text-decoration:none;text-decoration:none;}.css-13gzsmf{width:60px;height:60px;}@media (max-width:768px){.css-18t8hgp{display:none;}}.css-cybom1{margin:0 15px;cursor:pointer;color:#FFF;-webkit-text-decoration:none;text-decoration:none;font-weight:400;}.css-cybom1:hover{-webkit-text-decoration:underline;text-decoration:underline;}@media (max-width:768px){.css-cybom1{margin:15px 0;}}.css-1ycny1a{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:1;-ms-flex:1;flex:1;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media (max-width:768px){.css-1ycny1a{display:none;}}.css-1cb436f{min-height:90vh;}.css-v7hg16{max-width:1280px;margin:0 auto;padding:0 15px;}.css-1raousg{background-color:#2b32b2;}.css-1manadv{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;padding:20px 0;margin:30px 0;}.css-97vdgs{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;max-width:600px;width:100%;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}@media (max-width:768px){.css-97vdgs{-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}}.css-chw5zt{-webkit-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;width:50%;}@media (max-width:768px){.css-chw5zt{width:100%;}}.css-e18paf{color:#FFF;font-size:1.8rem;margin-top:0;margin-bottom:10px;}@media (max-width:768px){.css-e18paf{text-align:center;}}.css-1tlkawq{max-width:800px;width:100%;margin:0 0 15px;}.css-1xac0s9{color:#171718;font-size:1.2rem;height:60px;margin-bottom:5px;padding:0 15px;border-radius:8px;border:3px solid rgba(243,243,243,1);width:100%;outline:0;}.css-1xac0s9:focus{border:3px solid #2b32b2;}.css-1m030y7{color:#FFF;background-color:rgba(232,72,85,1);border:0;outline:0;padding:15px 30px;border-radius:8px;cursor:pointer;display:inline-block;width:100%;max-width:300px;max-width:initial;font-size:1.2rem;}.css-1m030y7:hover{background-color:rgb(235,95,106);}.css-1m7e2z{-webkit-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;background-color:#171718;color:#FFF;padding:45px 60px;}@media (max-width:768px){.css-1m7e2z{-webkit-flex-direction:column-reverse;-ms-flex-direction:column-reverse;flex-direction:column-reverse;}}.css-1pqmedy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:4 0 auto;-ms-flex:4 0 auto;flex:4 0 auto;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media (max-width:768px){.css-1pqmedy{-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}}.css-1m4wy5f{margin:5px 0;}.css-1830x7h{color:#FFF;margin:0 10px;cursor:pointer;-webkit-text-decoration:none;text-decoration:none;font-weight:400;}.css-1830x7h:hover{-webkit-text-decoration:underline;text-decoration:underline;}.css-kr2nmy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;}.css-qar1bk{padding:15px 0;}.css-eku11f{margin:5px 0;padding-top:10px;display:inline-block;position:relative;}.css-1i6pfy0{display:inline-block;position:relative;padding:.8rem 45px .8rem .8rem;margin-right:10px;cursor:pointer;-webkit-text-decoration:none;text-decoration:none;background-color:rgb(66,100,170);-webkit-transition:all ease 300ms;transition:all ease 300ms;}.css-1i6pfy0:hover{background-color:#3b5998;}.css-etd6cy{position:relative;left:0;top:0;bottom:0;right:45px;color:#FFF;}.css-miq6iv{position:absolute;right:0;top:0;width:40px;bottom:0;}.css-1aq6k0v{-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);top:50%;left:50%;position:absolute;}.css-9kv50g{display:inline-block;position:relative;padding:.8rem 45px .8rem .8rem;margin-right:10px;cursor:pointer;-webkit-text-decoration:none;text-decoration:none;background-color:rgb(108,183,240);-webkit-transition:all ease 300ms;transition:all ease 300ms;}.css-9kv50g:hover{background-color:#55acee;}.css-v360tt{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:100%;}@media screen and (min-width:40rem){.css-v360tt{-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}@media screen and (min-width:52rem){.css-v360tt{-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}.css-zrypnw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:100%;padding:12px;-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;background-color:#F1F1F1;}@media screen and (min-width:40rem){.css-zrypnw{width:16.666666666666664%;}}@media screen and (min-width:52rem){.css-zrypnw{width:16.666666666666664%;}}.css-1ofqig9{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:100%;}.css-sjfvfw{padding-bottom:10px;border-bottom:1px solid #DDD;}.css-arkg5h{margin:20px 0;display:inline-block;width:100%;background-color:#FFF;padding:4px 15px 30px 15px;box-shadow:0px 0px 2px 2px rgba(0,0,0,.05);position:relative;}.css-12fiv2e{position:absolute;left:0;top:0;right:0;height:4px;display:inline-block;background:linear-gradient(to right,#2b32b2 0%,rgb(48,56,199) 100%);}.css-1tyn5zp{margin:30px 0;}@media (max-width:768px){.css-1r7d14y{margin-top:30px;}}.css-4399yi{margin:0;padding:0;cursor:pointer;}.css-1xd8cnp{color:#171718;-webkit-text-decoration:none;text-decoration:none;}.css-1xd8cnp:hover{-webkit-text-decoration:underline;text-decoration:underline;}.css-1se5wrl{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:100%;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:10px 0;}.css-rkk3mp{font-size:1.25rem;}.css-5j4so5{width:30%;float:left;text-align:left;margin-top:7px;}.css-hpifob{color:#171718;-webkit-text-decoration:none;text-decoration:none;cursor:pointer;font-size:1.2rem;}.css-hpifob:hover{-webkit-text-decoration:underline;text-decoration:underline;}.css-g59ihq{margin:80px 0;display:inline-block;width:100%;background-color:#FFF;padding:0px;box-shadow:0px 0px 2px 2px rgba(0,0,0,.05);position:relative;}.css-ezyc4k{text-align:center;display:inline-block;width:100%;background-color:#171718;color:#FFF;padding:5vmin 1rem;}.css-126fjsd{background-color:rgba(249,220,92,1);color:#171718;font-size:1.2rem;padding:7px 15px;position:absolute;top:0;left:50%;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);}.css-1uk8qt2{color:#171718;-webkit-text-decoration:underline;text-decoration:underline;cursor:pointer;}.css-1x65ygl{font-size:3rem;}@media (max-width:768px){.css-1x65ygl{font-size:2rem;}}.css-1521j9w{color:#FFF;-webkit-text-decoration:none;text-decoration:none;margin-top:20px;display:inline-block;font-size:1.2rem;}.css-1521j9w:hover{-webkit-text-decoration:underline;text-decoration:underline;}.css-1ulvkyq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:100%;padding:12px;-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;}@media screen and (min-width:40rem){.css-1ulvkyq{width:83.33333333333334%;}}@media screen and (min-width:52rem){.css-1ulvkyq{width:83.33333333333334%;}}</style><link rel="apple-touch-icon" sizes="57x57" href="https://codedaily.io/static/img/apple-icon-57x57.png"><link rel="apple-touch-icon" sizes="60x60" href="https://codedaily.io/static/img/apple-icon-60x60.png"><link rel="apple-touch-icon" sizes="72x72" href="https://codedaily.io/static/img/apple-icon-72x72.png"><link rel="apple-touch-icon" sizes="76x76" href="https://codedaily.io/static/img/apple-icon-76x76.png"><link rel="apple-touch-icon" sizes="114x114" href="https://codedaily.io/static/img/apple-icon-114x114.png"><link rel="apple-touch-icon" sizes="120x120" href="https://codedaily.io/static/img/apple-icon-120x120.png"><link rel="apple-touch-icon" sizes="144x144" href="https://codedaily.io/static/img/apple-icon-144x144.png"><link rel="apple-touch-icon" sizes="152x152" href="https://codedaily.io/static/img/apple-icon-152x152.png"><link rel="apple-touch-icon" sizes="180x180" href="https://codedaily.io/static/img/apple-icon-180x180.png"><link rel="icon" type="image/png" sizes="192x192" href="https://codedaily.io/static/img/android-icon-192x192.png"><link rel="icon" type="image/png" sizes="32x32" href="https://codedaily.io/static/img/favicon-32x32.png"><link rel="icon" type="image/png" sizes="96x96" href="https://codedaily.io/static/img/favicon-96x96.png"><link rel="icon" type="image/png" sizes="16x16" href="https://codedaily.io/static/img/favicon-16x16.png"><link rel="manifest" href="https://codedaily.io/static/img/manifest.json"><meta name="msapplication-TileColor" content="#ffffff"><meta name="msapplication-TileImage" content="/static/img/ms-icon-144x144.png"><meta name="theme-color" content="#ffffff"><link rel="stylesheet" href="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/normalize.min.css"><link rel="stylesheet" href="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/github-markdown.min.css"><link rel="stylesheet" href="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/github.min.css"><link href="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/css" rel="stylesheet"><link href="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/css(1)" rel="stylesheet"><link href="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/global.css" rel="stylesheet"><style data-emotion=""></style><script src="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/CKYIT2JM.json"></script><script src="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/CKYIT2JM(1).json"></script></head><body><div id="__next"><div data-reactroot=""><div class="css-q7ikx9 e8xg9ni0"><div class="css-ydkf2t e8xg9ni6"><svg version="1.1" width="24" height="24" viewBox="0 0 24 24"><path fill="#FFF" d="M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z"></path></svg></div><div class="css-cn364u e8xg9ni2"><a href="https://codedaily.io/" class="css-1mra26b e8xg9ni3"><svg width="773px" height="759px" viewBox="0 0 773 759" class="css-13gzsmf e8xg9ni8"><g stroke="#FFF" fill="#FFF"><path d="M223.8047 683.14844c-20.53137 0-39.7968-3.86715-57.7969-11.60157-18.00008-7.7344-33.74992-18.3515-47.25-31.85156-13.50006-13.5-24.11714-29.2499-31.85155-47.25-7.7344-18-11.60156-37.2655-11.60156-57.7968v-43.0313c0-20.5313 3.8671-39.8671 11.6015-58.0078 7.7344-18.1407 18.3515-33.9608 31.8515-47.4609 13.50004-13.50004 29.2499-24.11712 47.25-31.85153 18.0001-7.73442 37.2655-11.60157 57.7969-11.60157h324.8438c20.53132 0 39.7968 3.8672 57.79684 11.6016 18.0001 7.7344 33.74995 18.3515 47.25 31.8516 13.5001 13.50005 24.11717 29.3202 31.8516 47.46092 7.7344 18.1407 11.60155 37.47646 11.60155 58.0078v43.03126c0 20.53136-3.86715 39.7968-11.60156 57.79688-7.73444 18.0001-18.3515 33.74995-31.8516 47.25-13.50005 13.50008-29.2499 24.11716-47.25 31.85158-18.00007 7.7344-37.2655 11.6016-57.79685 11.6016h-24.4687l-8.4375-54.42188h32.90623c13.50007 0 26.08588-2.53122 37.7578-7.59375 11.67194-5.0625 21.86715-11.9531 30.58595-20.67186 8.7187-8.7188 15.6093-18.914 20.6718-30.58593 5.0625-11.67193 7.5937-24.25774 7.5937-37.7578v-37.9688c0-13.50007-2.5312-26.0859-7.59377-37.7578-5.0625-11.67195-11.95307-21.93747-20.67186-30.7969-8.7188-8.8594-18.91403-15.8203-30.58596-20.8828-11.67193-5.06253-24.25774-7.59375-37.7578-7.59375H223.8046c-13.5001 0-26.0859 2.5312-37.75782 7.59373-11.67194 5.0625-21.93746 12.0234-30.79688 20.8828-8.85942 8.8594-15.8203 19.1249-20.8828 30.7969-5.06254 11.6719-7.59376 24.2577-7.59376 37.7578v37.9687c0 13.5001 2.53124 26.0859 7.59377 37.7578 5.0625 11.67197 12.0234 21.86718 20.8828 30.58598 8.85945 8.7188 19.12497 15.60936 30.7969 20.67188 11.67195 5.06255 24.25776 7.59377 37.7578 7.59377h32.90628l-8.85934 54.42188H223.8047z" stroke-width="150"></path><path d="M540.28277 20.69505c20.59922 0 39.92835 3.87993 57.98794 11.63992 18.0596 7.75998 33.8616 18.41216 47.4063 31.95686 13.5447 13.5447 24.1969 29.41715 31.9569 47.61784 7.76 18.2007 11.6399 37.60036 11.6399 58.1996V362.2737H82.305V170.10925c0-20.59922 3.87992-39.9989 11.6399-58.19958 7.75993-18.2007 18.4121-34.07314 31.9568-47.61784 13.5447-13.5447 29.41716-24.19688 47.61785-31.95686 18.2007-7.76 37.60034-11.63992 58.19957-11.63992h308.5636zm-308.56362 54.6018c-13.5447 0-26.1721 2.53958-37.88263 7.61885-11.71053 5.07926-22.00998 12.06314-30.8987 20.95185-8.8887 8.8887-15.87258 19.18816-20.95184 30.89868-5.07927 11.71052-7.61886 24.33794-7.61886 37.88264V307.6719h502.8444V172.64888c0-13.5447-2.5396-26.1721-7.61885-37.88263-5.07926-11.71052-11.9926-22.00998-20.7402-30.8987-8.74763-8.8887-18.97655-15.87258-30.68707-20.95184-11.71052-5.0792-24.33794-7.6188-37.88263-7.6188H231.71915z" stroke-width="40"></path></g></svg></a></div><div class="css-18t8hgp e8xg9ni1"><a href="https://codedaily.io/tutorials" class="css-cybom1 e8xg9ni5">Tutorials</a><a href="https://codedaily.io/screencasts" class="css-cybom1 e8xg9ni5">Screencasts</a><a href="https://codedaily.io/courses" class="css-cybom1 e8xg9ni5">Courses</a></div><div class="css-1ycny1a e8xg9ni4"><div><form><input placeholder="Search..." value=""></form></div><a href="https://codedaily.io/login" class="css-cybom1 e8xg9ni5">Login</a><a href="https://codedaily.io/register" class="css-cybom1 e8xg9ni5">Sign Up</a></div></div><div class="css-1cb436f eyozb820"><div class="css-v7hg16 e1flnwkx0"><div class="css-qar1bk e11he58o0"><div class="css-g59ihq e18f1mng0"><div class="css-ezyc4k e1aw4cdk1"><div class="css-126fjsd e1aw4cdk3"><span class="css-1uk8qt2 e1aw4cdk4">React Native</span></div><h1 class="css-1x65ygl e1aw4cdk2">Maintain Touchable Items with a Parent PanResponder in React Native</h1><div class="css-eku11f e11n90wq0"><a href="https://facebook.com/sharer/sharer.php?u=https://codedaily.io/tutorials/1/Maintain-Touchable-Items-with-a-Parent-PanResponder-in-React-Native" target="_blank" aria-label="Maintain Touchable Items with a Parent PanResponder in React Native" class="css-1i6pfy0 e11n90wq4"><div class="css-etd6cy e11n90wq1">Share this</div><div style="background-color:#3b5998" class="css-miq6iv e11n90wq2"><div class="css-1aq6k0v e11n90wq3"><svg version="1.1" width="30" height="30" viewBox="0 0 24 24"><path fill="#FFF" d="M17,2V2H17V6H15C14.31,6 14,6.81 14,7.5V10H14L17,10V14H14V22H10V14H7V10H10V6A4,4 0 0,1 14,2H17Z"></path></svg></div></div></a><a href="https://twitter.com/intent/tweet/?text=Maintain%20Touchable%20Items%20with%20a%20Parent%20PanResponder%20in%20React%20Native%20%20%23reactnative&amp;amp;url=https://codedaily.io/tutorials/1/Maintain-Touchable-Items-with-a-Parent-PanResponder-in-React-Native" target="_blank" aria-label="Maintain Touchable Items with a Parent PanResponder in React Native" class="css-9kv50g e11n90wq4"><div class="css-etd6cy e11n90wq1">Tweet this</div><div style="background-color:#55acee" class="css-miq6iv e11n90wq2"><div class="css-1aq6k0v e11n90wq3"><svg version="1.1" width="30" height="30" viewBox="0 0 24 24"><path fill="#FFF" d="M22.46,6C21.69,6.35 20.86,6.58 20,6.69C20.88,6.16 21.56,5.32 21.88,4.31C21.05,4.81 20.13,5.16 19.16,5.36C18.37,4.5 17.26,4 16,4C13.65,4 11.73,5.92 11.73,8.29C11.73,8.63 11.77,8.96 11.84,9.27C8.28,9.09 5.11,7.38 3,4.79C2.63,5.42 2.42,6.16 2.42,6.94C2.42,8.43 3.17,9.75 4.33,10.5C3.62,10.5 2.96,10.3 2.38,10C2.38,10 2.38,10 2.38,10.03C2.38,12.11 3.86,13.85 5.82,14.24C5.46,14.34 5.08,14.39 4.69,14.39C4.42,14.39 4.15,14.36 3.89,14.31C4.43,16 6,17.26 7.89,17.29C6.43,18.45 4.58,19.13 2.56,19.13C2.22,19.13 1.88,19.11 1.54,19.07C3.44,20.29 5.7,21 8.12,21C16,21 20.33,14.46 20.33,8.79C20.33,8.6 20.33,8.42 20.32,8.23C21.16,7.63 21.88,6.87 22.46,6Z"></path></svg></div></div></a></div><div><a href="https://github.com/browniefed/react-native-parent-panresponder-touch" target="_blank" class="css-1521j9w e1glkc4m1">Tutorial Code</a></div></div><div class="css-v360tt e1pvllgl0"><div class="css-1ulvkyq e1pvllgl0"><div></div><div class="markdown-body"><div><h2>What Are We Building</h2><p><img alt="https://i.imgur.com/r1eZgLn.gif" src="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/r1eZgLn.gif"></p><h2>Intro</h2><p>One of the issues I've noticed with PanResponder is that people assume it is an all or nothing. 
By that I mean adding a PanResponder in a parent view means it will steal all of your touches and <code class="lowlight" style="display:inline">Touchable</code> items won't be touchable any longer.</p><p>You may be running into this because you copy and pasted it from here the documentation here <a href="https://facebook.github.io/react-native/docs/panresponder.html">https://facebook.github.io/react-native/docs/panresponder.html</a> and it includes a capture phase returning true.
(I copy and paste this all the time).
We'll talk about the capture phase next.</p><p>This is far from the case. As always, React Native internal code is all built on the same components you are using so be sure and always read that code.
Navigation is one example that uses a top level PanResponder and only deals with touches on the outer edge of the screen.</p><p>Real internal react native example code for <a href="https://github.com/facebook/react-native/blob/a2fb703bbb988038323c55b29b40e8f5ff52966d/Libraries/CustomComponents/NavigationExperimental/NavigationCardStackPanResponder.js#L97">NavigationExperimental here</a></p><h2>Example code</h2><p>You can grab the full code in this repo here.</p><p><a href="https://github.com/browniefed/react-native-parent-panresponder-touch">https://github.com/browniefed/react-native-parent-panresponder-touch</a></p><h2>General PanResponder</h2><p>The React Native folk built the gesture responding system very similar to the web. The gesture system has a capture phase, just like the web.
If you didn't know about the capture system on the web, there is one. The events go from a capture phase and back up through the bubble phase.
You may have heard of "event bubbling" where the event starts at the inner most child then moves up each element.
However before that the <code class="lowlight" style="display:inline">capture</code> phase triggered and traversed from the top down to the element you clicked.</p><p><code class="lowlight" style="display:inline">top =&gt; #random_parent =&gt; #random_child2 =&gt; thing you clicked =&gt; #random_child2 =&gt; #random_parent =&gt; top</code></p><p>The capture phase in React Native has two phases per PanResponder. It has <code class="lowlight" style="display:inline">onStartShouldSetResponderCapture</code> and <code class="lowlight" style="display:inline">onMoveShouldSetResponderCapture</code>.
The <code class="lowlight" style="display:inline">onStartShouldSetResponderCapture</code> is called on the beginning touch, and <code class="lowlight" style="display:inline">onMoveShouldSetResponderCapture</code> is called on every time you move your finger.</p><p>After the capture phase the bottom level touched view will then move back up the chain.
The <code class="lowlight" style="display:inline">onStartShouldSetResponder</code> function will be called on initial press, then <code class="lowlight" style="display:inline">onMoveShouldSetResponder</code> will be called each movement of the finger.</p><p>At any point that a capture phase, or non capture phase returns <code class="lowlight" style="display:inline"><span class="hljs-literal">true</span></code> that <code class="lowlight" style="display:inline">PanResponder</code> will receive the gesture.
In that case <code class="lowlight" style="display:inline">onResponderGrant</code> will be called, then <code class="lowlight" style="display:inline">onResponderMove</code>, then eventually when the user removes their finger <code class="lowlight" style="display:inline">onResponderRelease</code>.</p><p>Now do remember the capture and bubble phase are happening on <strong>EACH</strong> finger movement. 
So that means if a parent view returns true in <code class="lowlight" style="display:inline">onMoveShouldSetResponderCapture</code> phase then the touch will be taken away from the other active <code class="lowlight" style="display:inline">PanResponder</code></p><p>When that happens <code class="lowlight" style="display:inline">onResponderTerminationRequest</code> is called on the active <code class="lowlight" style="display:inline">PanResponder</code> if it returns true then <code class="lowlight" style="display:inline">onResponderTerminate</code> is called.
Basically you said "Sure whatever else wants the gesture they can have it".</p><p>Finally when the OS steals the gesture (like when you swipe down the notification center), the <code class="lowlight" style="display:inline">onResponderTerminationRequest</code> function is called.</p><p>All of these are generally setup to just return <code class="lowlight" style="display:inline"><span class="hljs-literal">true</span></code> for you so that the generally appropriate actions are taken.</p><h2>PanResponder Best Practices</h2><p>All of that being said. Don't use the <code class="lowlight" style="display:inline">capture</code> phase, you will rarely ever use it much like the web.
Stick to the function calls without <code class="lowlight" style="display:inline">capture</code>.</p><p>When you need something, you need to decide <code class="lowlight" style="display:inline"><span class="hljs-keyword">do</span> I want to <span class="hljs-keyword">do</span> it on the first press</code> or <code class="lowlight" style="display:inline"><span class="hljs-keyword">do</span> I want to <span class="hljs-keyword">do</span> it on every movement</code>.
So that means you return true from <code class="lowlight" style="display:inline">onStartShouldSetResponder</code> or <code class="lowlight" style="display:inline">onMoveShouldSetResponder</code></p><p>Mostly the reason you don't ever use these is as the default says "The deepest element gets focus". Aka a button you pressed gets pressed, typically that's what you want.</p><h2>What the hell does this mean?</h2><p>It means</p><pre class="lowlight"><code class="hljs js">&lt;SpecialViewToDoThings&gt;
    &lt;SomeCrazyScrollView&gt;
        &lt;TouchableOpacity&gt;
            &lt;Text&gt;Look a button&lt;/Text&gt;
        &lt;/TouchableOpacity&gt;
    &lt;/SomeCrazyScrollView&gt;
&lt;<span class="hljs-regexp">/SpecialViewToDoThings&gt;</span></code></pre><p>Without <code class="lowlight" style="display:inline">capture</code> phases, <code class="lowlight" style="display:inline">TouchableOpacity</code> <code class="lowlight" style="display:inline">onPress</code> will get the touch.
With a <code class="lowlight" style="display:inline">capture</code> phase returning true <code class="lowlight" style="display:inline">SpecialViewToDoThings</code> will get touch.
<code class="lowlight" style="display:inline">SomeCrazyScrollView</code> will get the scroll when someone doesn't press a <code class="lowlight" style="display:inline">TouchableOpacity</code> and <code class="lowlight" style="display:inline">SpecialViewToDoThings</code> doesn't return true from a capture phase.</p><h2>WHY DIDN'T THEY SAY ANY OF THIS!?!?!?</h2><p>Oh don't worry, none of this information is new, it's in the docs <a href="https://facebook.github.io/react-native/docs/gesture-responder-system.html">https://facebook.github.io/react-native/docs/gesture-responder-system.html</a></p><p>Still not clear? Lets do some code. This will just show you how to make internal touchable things and still capture touches with a parent <code class="lowlight" style="display:inline">PanResponder</code>.</p><h2>Create a PanResponder</h2><p>First we need to create a <code class="lowlight" style="display:inline">PanResponder</code>. If you look at the documentation you'll notice many of the functions are not necessary, and or default to returning true.
So we'll </p><pre class="lowlight"><code class="hljs js">componentWillMount() {
    <span class="hljs-keyword">this</span>._panResponder = PanResponder.create({
        <span class="hljs-attr">onMoveShouldSetPanResponder</span>:<span class="hljs-function">(<span class="hljs-params">evt, gestureState</span>) =&gt;</span> <span class="hljs-literal">true</span>,
        <span class="hljs-attr">onPanResponderMove</span>: <span class="hljs-function">(<span class="hljs-params">evt, gestureState</span>) =&gt;</span> {
            <span class="hljs-comment">// DO JUNK HERE</span>
        }
    });
}</code></pre><h2>All the available stuff</h2><p>I won't type it all out. It's all in the documentation <a href="https://facebook.github.io/react-native/docs/panresponder.html">https://facebook.github.io/react-native/docs/panresponder.html</a></p><h2>Create a simple view</h2><p>We start by creating  a <code class="lowlight" style="display:inline">View</code> with some styles and setup some state for the button.</p><pre class="lowlight"><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PanResponderTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{
  <span class="hljs-keyword">constructor</span>(props) {
    <span class="hljs-keyword">super</span>(props)

    <span class="hljs-keyword">this</span>.state = {
      <span class="hljs-attr">zone</span>: <span class="hljs-string">"Still Touchable"</span>
    }

    <span class="hljs-keyword">this</span>.onPress = <span class="hljs-keyword">this</span>.onPress.bind(<span class="hljs-keyword">this</span>);
  }

  onPress() {
    <span class="hljs-keyword">this</span>.setState({
      <span class="hljs-attr">zone</span>: <span class="hljs-string">"I got touched with a parent pan responder"</span>
    })
  }

  render() {
    <span class="hljs-keyword">return</span> (
      &lt;View style={styles.container}&gt;
        &lt;View style={styles.zone1} /&gt;
        &lt;View style={styles.center}&gt;
          &lt;TouchableOpacity onPress={this.onPress}&gt;
            &lt;Text&gt;{this.state.zone}&lt;/Text&gt;
          &lt;/TouchableOpacity&gt;
        &lt;/View&gt;
        &lt;View style={styles.zone2} /&gt;
      &lt;/View&gt;
    );
  }
}</code></pre><p>We create a top level container (which will receive the <code class="lowlight" style="display:inline">PanResponder</code>). 2 zones, one red, and one blue. These will be special zones for touch registering. 
Then finally a <code class="lowlight" style="display:inline">TouchableOpacity</code> button. This will simulate some internal item you want pressed while having an external <code class="lowlight" style="display:inline">PanResponder</code>.</p><pre class="lowlight"><code class="hljs js"><span class="hljs-keyword">const</span> styles = StyleSheet.create({
  <span class="hljs-attr">container</span>: {
    <span class="hljs-attr">flex</span>: <span class="hljs-number">1</span>
  },
  <span class="hljs-attr">center</span>: {
    <span class="hljs-attr">flex</span>: <span class="hljs-number">1</span>,
    <span class="hljs-attr">alignItems</span>: <span class="hljs-string">"center"</span>,
    <span class="hljs-attr">justifyContent</span>: <span class="hljs-string">"center"</span> 
  },
  <span class="hljs-attr">zone1</span>: {
    <span class="hljs-attr">top</span>: <span class="hljs-number">40</span>,
    <span class="hljs-attr">left</span>: <span class="hljs-number">0</span>,
    <span class="hljs-attr">right</span>: <span class="hljs-number">0</span>,
    <span class="hljs-attr">height</span>: <span class="hljs-number">50</span>,
    <span class="hljs-attr">position</span>: <span class="hljs-string">'absolute'</span>,
    <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">"red"</span>
  },
  <span class="hljs-attr">zone2</span>: {
    <span class="hljs-attr">left</span>: <span class="hljs-number">0</span>,
    <span class="hljs-attr">right</span>: <span class="hljs-number">0</span>,
    <span class="hljs-attr">bottom</span>: <span class="hljs-number">0</span>,
    <span class="hljs-attr">height</span>: <span class="hljs-number">50</span>,
    <span class="hljs-attr">position</span>: <span class="hljs-string">'absolute'</span>,
    <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">"blue"</span>
  }
});</code></pre><p>We will center the button, and put our special zones at the top and bottom.</p><p><code class="lowlight" style="display:inline">TouchableOpacity</code> uses <code class="lowlight" style="display:inline">PanResponder</code> to detect touches, so it will play into the bubble and capture phases.
The zones have no <code class="lowlight" style="display:inline">PanResponder</code> gestures registered so it won't play into the capture and bubble phases.</p><h2>Limit it to region</h2><p>This line <code class="lowlight" style="display:inline">onMoveShouldSetPanResponder:<span class="hljs-function">(<span class="hljs-params">evt, gestureState</span>) =&gt;</span> <span class="hljs-literal">true</span></code> always returns true so the element will always accept.
Also we aren't using the <code class="lowlight" style="display:inline">capture</code> phase so the <code class="lowlight" style="display:inline">TouchableOpacity</code> will always be pressable.
However our parent <code class="lowlight" style="display:inline">PanResponder</code> will get triggered when we don't press the button.</p><h2>Limit it to distance moved</h2><p><code class="lowlight" style="display:inline">moveX</code> and <code class="lowlight" style="display:inline">moveY</code> are the current coordinate positions of the <code class="lowlight" style="display:inline">gestureState</code>.
<code class="lowlight" style="display:inline">dx</code> and <code class="lowlight" style="display:inline">dy</code> are the distance change from where the initial finger was put down (delta X and delta Y).</p><pre class="lowlight"><code class="hljs js"><span class="hljs-keyword">const</span> getDirectionAndColor = <span class="hljs-function">(<span class="hljs-params">{ moveX, moveY, dx, dy}</span>) =&gt;</span> {
  <span class="hljs-keyword">const</span> draggedDown = dy &gt; <span class="hljs-number">30</span>;
  <span class="hljs-keyword">const</span> draggedUp = dy &lt; <span class="hljs-number">-30</span>;
  <span class="hljs-keyword">const</span> draggedLeft = dx &lt; <span class="hljs-number">-30</span>;
  <span class="hljs-keyword">const</span> draggedRight = dx &gt; <span class="hljs-number">30</span>;
  <span class="hljs-keyword">const</span> isRed = moveY &lt; <span class="hljs-number">90</span> &amp;&amp; moveY &gt; <span class="hljs-number">40</span> &amp;&amp; moveX &gt; <span class="hljs-number">0</span> &amp;&amp; moveX &lt; width;
  <span class="hljs-keyword">const</span> isBlue = moveY &gt; (height - <span class="hljs-number">50</span>) &amp;&amp; moveX &gt; <span class="hljs-number">0</span> &amp;&amp; moveX &lt; width;
  <span class="hljs-keyword">let</span> dragDirection = <span class="hljs-string">''</span>;

  <span class="hljs-keyword">if</span> (draggedDown || draggedUp) {
    <span class="hljs-keyword">if</span> (draggedDown) dragDirection += <span class="hljs-string">'dragged down '</span>
    <span class="hljs-keyword">if</span> (draggedUp) dragDirection +=  <span class="hljs-string">'dragged up '</span>;
  }

  <span class="hljs-keyword">if</span> (draggedLeft || draggedRight) {
    <span class="hljs-keyword">if</span> (draggedLeft) dragDirection += <span class="hljs-string">'dragged left '</span>
    <span class="hljs-keyword">if</span> (draggedRight) dragDirection +=  <span class="hljs-string">'dragged right '</span>;
  }

  <span class="hljs-keyword">if</span> (isRed) <span class="hljs-keyword">return</span> <span class="hljs-string">`red <span class="hljs-subst">${dragDirection}</span>`</span>
  <span class="hljs-keyword">if</span> (isBlue) <span class="hljs-keyword">return</span> <span class="hljs-string">`blue <span class="hljs-subst">${dragDirection}</span>`</span>
  <span class="hljs-keyword">if</span> (dragDirection) <span class="hljs-keyword">return</span> dragDirection;
}</code></pre><p>We define that if a user moves their finger in a direction further than 30 pixels than we'll trigger a direction.
Also if they are within the absolutely positioned zones we'll tag them with <code class="lowlight" style="display:inline">red</code> or <code class="lowlight" style="display:inline">blue</code>.</p><p>This function will return nothing if we haven't dragged a finger greater than 30 pixels, and or we aren't in a particular zone.</p><h2>Where does this function go?</h2><p>Since our <code class="lowlight" style="display:inline">getDirectionAndColor</code> function will return either <code class="lowlight" style="display:inline">truthy</code> or <code class="lowlight" style="display:inline">falsy</code> values we can pass that right into our <code class="lowlight" style="display:inline">onMoveShouldSetPanResponder</code>.
This means when it returns <code class="lowlight" style="display:inline">truthy</code> our <code class="lowlight" style="display:inline">onPanResponderMove</code>. We then recall the function and then call <code class="lowlight" style="display:inline">setState</code> to update the button text.</p><pre class="lowlight"><code class="hljs js">  componentWillMount() {
    <span class="hljs-keyword">this</span>._panResponder = PanResponder.create({
      <span class="hljs-attr">onMoveShouldSetPanResponder</span>:<span class="hljs-function">(<span class="hljs-params">evt, gestureState</span>) =&gt;</span> !!getDirectionAndColor(gestureState),
      <span class="hljs-attr">onPanResponderMove</span>: <span class="hljs-function">(<span class="hljs-params">evt, gestureState</span>) =&gt;</span> {
        <span class="hljs-keyword">const</span> drag = getDirectionAndColor(gestureState);
        <span class="hljs-keyword">this</span>.setState({
          <span class="hljs-attr">zone</span>: drag,
        })
      },
    });
  }</code></pre><p>Finally we need to add our <code class="lowlight" style="display:inline">PanResponder</code> to the parent <code class="lowlight" style="display:inline">View</code> like so</p><pre class="lowlight"><code class="hljs js">  render() {
    <span class="hljs-keyword">return</span> (
      &lt;View style={styles.container} {...this._panResponder.panHandlers}&gt;
        &lt;View style={styles.zone1} /&gt;
        &lt;View style={styles.center}&gt;
          &lt;TouchableOpacity onPress={this.onPress}&gt;
            &lt;Text&gt;{this.state.zone}&lt;/Text&gt;
          &lt;/TouchableOpacity&gt;
        &lt;/View&gt;
        &lt;View style={styles.zone2} /&gt;
      &lt;/View&gt;
    );
  }</code></pre><h2>Potential uses</h2><p>You can use the <code class="lowlight" style="display:inline">onLayout</code> callback from any component to then define your layout constraints for your PanResponder.
You could position things off screen then drag them on screen by triggering an <code class="lowlight" style="display:inline">Animated</code> value while your current view stays touchable.</p><p>There are all of the potential use cases, it's all about what you need to accomplish and or what your product manager wants.</p><h2>Final code</h2><p>That's it. Go forth and gesture.</p><p>Once again our full code example is up here
<a href="https://github.com/browniefed/react-native-parent-panresponder-touch">https://github.com/browniefed/react-native-parent-panresponder-touch</a></p><p><img alt="https://i.imgur.com/r1eZgLn.gif" src="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/r1eZgLn.gif"></p></div></div><div></div></div><div class="css-zrypnw e1pvllgl0"><div class="sticky-outer-wrapper" style=""><div class="sticky-inner-wrapper" style="position: relative; transform: translate3d(0px, 0px, 0px);"><div class="side-bar-placement" id="loader3956d3ab"></div><div><script async="" src="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/carbon.js" id="_carbonads_js"></script></div></div></div></div></div><div class="css-1ofqig9 e1pvllgl0"><div class="css-1raousg e19jglnj0"><div class="css-v7hg16 e1flnwkx0"><div class="css-1manadv e19jglnj1"><div class="css-97vdgs e19jglnj2"><div class="css-chw5zt e19jglnj3"><p class="css-e18paf e19jglnj4">Liked this content?</p><p class="css-e18paf e19jglnj4">Get notified more about React Native!</p><p class="css-e18paf e19jglnj4">No Spam! We Promise!</p></div><div class="css-chw5zt e19jglnj3"><div><div class="css-1tlkawq e1t4azuy9"><input placeholder="Your Name" value="" class="css-1xac0s9 e1t4azuy5"></div><div class="css-1tlkawq e1t4azuy9"><input type="email" placeholder="Your Email" value="" class="css-1xac0s9 e1t4azuy5"></div><div class="css-1tlkawq e1t4azuy9"><button class="css-1m030y7 e19jglnj6">Subscribe</button></div></div></div></div></div></div></div></div></div><div class="css-1ofqig9 e1pvllgl0"><h1 class="css-sjfvfw e1glkc4m2">Related Content</h1><div class="css-arkg5h eau0e8i11"><div class="css-12fiv2e eau0e8i12"></div><div class="css-1tyn5zp eau0e8i0"><div class="css-1r7d14y eau0e8i1"><h2 class="css-4399yi eau0e8i2"><a href="https://codedaily.io/tutorial/57/Custom-Handling-the-Android-Back-Button-with-React-Navigation" class="css-1xd8cnp eau0e8i3">Custom Handling the Android Back Button with React Navigation</a></h2><div class="css-1se5wrl eau0e8i10"></div><div class="markdown-body css-rkk3mp eau0e8i4"><div><p>In this lesson we'll explore setting up a stack navigator in React Navigation. We'll create a custom component that uses <code class="lowlight" style="display:inline">withNavigation</code> to allow us to listen to navigation transitions. Using the <code class="lowlight" style="display:inline">BackHandler</code> from React Native we can ask the screen if custom needs are required when the hardware back button is pressed. Finally we'll prompt the user if they want to navigate.</p></div></div><div class="css-0 eau0e8i5"><div class="css-5j4so5 eau0e8i7"><a href="https://codedaily.io/tutorials/57/Custom-Handling-the-Android-Back-Button-with-React-Navigation" class="css-hpifob eau0e8i8">Read More<!-- --> →</a></div></div></div></div></div><div class="css-arkg5h eau0e8i11"><div class="css-12fiv2e eau0e8i12"></div><div class="css-1tyn5zp eau0e8i0"><div class="css-1r7d14y eau0e8i1"><h2 class="css-4399yi eau0e8i2"><a href="https://codedaily.io/tutorial/56/Conditional-JavaScript-Callbacks-with-Reanimated-in-React-Native" class="css-1xd8cnp eau0e8i3">Conditional JavaScript Callbacks with Reanimated in React Native</a></h2><div class="css-1se5wrl eau0e8i10"></div><div class="markdown-body css-rkk3mp eau0e8i4"><div><p>In this lesson we'll explore how to setup a draggable circle. Then we'll dive into using the <code class="lowlight" style="display:inline">call</code> method to create JavaScript callbacks whenever certain conditions are met inside of Reanimated.</p></div></div><div class="css-0 eau0e8i5"><div class="css-5j4so5 eau0e8i7"><a href="https://codedaily.io/tutorials/56/Conditional-JavaScript-Callbacks-with-Reanimated-in-React-Native" class="css-hpifob eau0e8i8">Read More<!-- --> →</a></div></div></div></div></div><div class="css-arkg5h eau0e8i11"><div class="css-12fiv2e eau0e8i12"></div><div class="css-1tyn5zp eau0e8i0"><div class="css-1r7d14y eau0e8i1"><h2 class="css-4399yi eau0e8i2"><a href="https://codedaily.io/screencast/84/Custom-Handling-the-Android-Back-Button-with-React-Navigation" class="css-1xd8cnp eau0e8i3">Custom Handling the Android Back Button with React Navigation</a></h2><div class="css-1se5wrl eau0e8i10"></div><div class="markdown-body css-rkk3mp eau0e8i4"><div><p>In this lesson we'll explore setting up a stack navigator in React Navigation. We'll create a custom component that uses <code class="lowlight" style="display:inline">withNavigation</code> to allow us to listen to navigation transitions. Using the <code class="lowlight" style="display:inline">BackHandler</code> from React Native we can ask the screen if custom needs are required when the hardware back button is pressed. Finally we'll prompt the user if they want to navigate.</p></div></div><div class="css-0 eau0e8i5"><div class="css-5j4so5 eau0e8i7"><a href="https://codedaily.io/screencasts/84/Custom-Handling-the-Android-Back-Button-with-React-Navigation" class="css-hpifob eau0e8i8">Watch<!-- --> →</a></div></div></div></div></div><div class="css-arkg5h eau0e8i11"><div class="css-12fiv2e eau0e8i12"></div><div class="css-1tyn5zp eau0e8i0"><div class="css-1r7d14y eau0e8i1"><h2 class="css-4399yi eau0e8i2"><a href="https://codedaily.io/screencast/83/Conditional-JavaScript-Callbacks-with-Reanimated-in-React-Native" class="css-1xd8cnp eau0e8i3">Conditional JavaScript Callbacks with Reanimated in React Native</a></h2><div class="css-1se5wrl eau0e8i10"></div><div class="markdown-body css-rkk3mp eau0e8i4"><div><p>In this lesson we'll explore how to setup a draggable circle. Then we'll dive into using the <code class="lowlight" style="display:inline">call</code> method to create JavaScript callbacks whenever certain conditions are met inside of Reanimated.</p></div></div><div class="css-0 eau0e8i5"><div class="css-5j4so5 eau0e8i7"><a href="https://codedaily.io/screencasts/83/Conditional-JavaScript-Callbacks-with-Reanimated-in-React-Native" class="css-hpifob eau0e8i8">Watch<!-- --> →</a></div></div></div></div></div></div></div></div></div><div class="css-1m7e2z e1waknh60"><div class="css-1pqmedy e1waknh63"><div class="css-1m4wy5f e1waknh62"><a href="https://codedaily.io/" class="css-1830x7h e1waknh61">Home</a></div><div class="css-1m4wy5f e1waknh62"><a href="https://codedaily.io/about" class="css-1830x7h e1waknh61">About</a></div><div class="css-1m4wy5f e1waknh62"><a href="https://codedaily.io/tutorials" class="css-1830x7h e1waknh61">Tutorials</a></div><div class="css-1m4wy5f e1waknh62"><a href="https://codedaily.io/screencasts" class="css-1830x7h e1waknh61">Screencasts</a></div><div class="css-1m4wy5f e1waknh62"><a href="https://codedaily.io/courses" class="css-1830x7h e1waknh61">Courses</a></div></div><div class="css-kr2nmy e1waknh64"><a href="https://twitter.com/codedailyio" class="css-1830x7h e1waknh61"><svg version="1.1" width="32" height="32" viewBox="0 0 24 24"><path fill="#FFF" d="M22.46,6C21.69,6.35 20.86,6.58 20,6.69C20.88,6.16 21.56,5.32 21.88,4.31C21.05,4.81 20.13,5.16 19.16,5.36C18.37,4.5 17.26,4 16,4C13.65,4 11.73,5.92 11.73,8.29C11.73,8.63 11.77,8.96 11.84,9.27C8.28,9.09 5.11,7.38 3,4.79C2.63,5.42 2.42,6.16 2.42,6.94C2.42,8.43 3.17,9.75 4.33,10.5C3.62,10.5 2.96,10.3 2.38,10C2.38,10 2.38,10 2.38,10.03C2.38,12.11 3.86,13.85 5.82,14.24C5.46,14.34 5.08,14.39 4.69,14.39C4.42,14.39 4.15,14.36 3.89,14.31C4.43,16 6,17.26 7.89,17.29C6.43,18.45 4.58,19.13 2.56,19.13C2.22,19.13 1.88,19.11 1.54,19.07C3.44,20.29 5.7,21 8.12,21C16,21 20.33,14.46 20.33,8.79C20.33,8.6 20.33,8.42 20.32,8.23C21.16,7.63 21.88,6.87 22.46,6Z"></path></svg></a><a href="https://github.com/codedailyio" class="css-1830x7h e1waknh61"><svg version="1.1" width="32" height="32" viewBox="0 0 24 24"><path fill="#FFF" d="M12,2A10,10 0 0,0 2,12C2,16.42 4.87,20.17 8.84,21.5C9.34,21.58 9.5,21.27 9.5,21C9.5,20.77 9.5,20.14 9.5,19.31C6.73,19.91 6.14,17.97 6.14,17.97C5.68,16.81 5.03,16.5 5.03,16.5C4.12,15.88 5.1,15.9 5.1,15.9C6.1,15.97 6.63,16.93 6.63,16.93C7.5,18.45 8.97,18 9.54,17.76C9.63,17.11 9.89,16.67 10.17,16.42C7.95,16.17 5.62,15.31 5.62,11.5C5.62,10.39 6,9.5 6.65,8.79C6.55,8.54 6.2,7.5 6.75,6.15C6.75,6.15 7.59,5.88 9.5,7.17C10.29,6.95 11.15,6.84 12,6.84C12.85,6.84 13.71,6.95 14.5,7.17C16.41,5.88 17.25,6.15 17.25,6.15C17.8,7.5 17.45,8.54 17.35,8.79C18,9.5 18.38,10.39 18.38,11.5C18.38,15.32 16.04,16.16 13.81,16.41C14.17,16.72 14.5,17.33 14.5,18.26C14.5,19.6 14.5,20.68 14.5,21C14.5,21.27 14.66,21.59 15.17,21.5C19.14,20.16 22,16.42 22,12A10,10 0 0,0 12,2Z"></path></svg></a><a href="https://www.facebook.com/Code-Daily-145985415926063/" class="css-1830x7h e1waknh61"><svg version="1.1" width="32" height="32" viewBox="0 0 24 24"><path fill="#FFF" d="M17,2V2H17V6H15C14.31,6 14,6.81 14,7.5V10H14L17,10V14H14V22H10V14H7V10H10V6A4,4 0 0,1 14,2H17Z"></path></svg></a><a href="https://codedaily.io/atom.xml" class="css-1830x7h e1waknh61"><svg version="1.1" width="32" height="32" viewBox="0 0 455.731 455.731"><g fill="#FFF"><path d="M296.208 159.16C234.445 97.397 152.266 63.382 64.81 63.382v64.348c70.268 0 136.288 27.321 185.898 76.931 49.609 49.61 76.931 115.63 76.931 185.898h64.348c-.001-87.456-34.016-169.636-95.779-231.399z"></path><path d="M64.143 172.273v64.348c84.881 0 153.938 69.056 153.938 153.939h64.348c0-120.364-97.922-218.287-218.286-218.287z"></path><circle cx="109.833" cy="346.26" r="46.088"></circle></g></svg></a></div></div></div></div><script async="" src="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/analytics.js"></script><script src="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/monetization.js" type="text/javascript"></script><script src="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/checkout.js"></script><script>__NEXT_DATA__ = {"props":{"pageProps":{"user":false,"id":"1","slug":"Maintain-Touchable-Items-with-a-Parent-PanResponder-in-React-Native","related":{"screencasts":[{"id":84,"created_at":"2018-08-07T04:12:03.323Z","title":"Custom Handling the Android Back Button with React Navigation","description":"In this lesson we'll explore setting up a stack navigator in React Navigation. We'll create a custom component that uses `withNavigation` to allow us to listen to navigation transitions. Using the `BackHandler` from React Native we can ask the screen if custom needs are required when the hardware back button is pressed. Finally we'll prompt the user if they want to navigate.","image":"https://images.codedaily.io/lessons/reactnavigation/AndroidBackPrompt.gif"},{"id":83,"created_at":"2018-08-06T02:05:45.119Z","title":"Conditional JavaScript Callbacks with Reanimated in React Native","description":"In this lesson we'll explore how to setup a draggable circle. Then we'll dive into using the `call` method to create JavaScript callbacks whenever certain conditions are met inside of Reanimated.","image":"https://images.codedaily.io/lessons/reanimated/ReanimatedDragJSCall.gif"}],"tutorials":[{"id":57,"created_at":"2018-08-06T05:01:04.835Z","title":"Custom Handling the Android Back Button with React Navigation","description":"In this lesson we'll explore setting up a stack navigator in React Navigation. We'll create a custom component that uses `withNavigation` to allow us to listen to navigation transitions. Using the `BackHandler` from React Native we can ask the screen if custom needs are required when the hardware back button is pressed. Finally we'll prompt the user if they want to navigate.","image":"https://images.codedaily.io/lessons/reactnavigation/AndroidBackPrompt.gif"},{"id":56,"created_at":"2018-08-02T05:07:18.823Z","title":"Conditional JavaScript Callbacks with Reanimated in React Native","description":"In this lesson we'll explore how to setup a draggable circle. Then we'll dive into using the `call` method to create JavaScript callbacks whenever certain conditions are met inside of Reanimated.","image":"https://images.codedaily.io/lessons/reanimated/ReanimatedDragJSCall.gif"}]},"tutorial":{"meta":{"id":1,"published":true,"title":"Maintain Touchable Items with a Parent PanResponder in React Native","description":"## What Are We Building\n\n![https://i.imgur.com/r1eZgLn.gif](https://i.imgur.com/r1eZgLn.gif)\n## Intro\n\nOne of the issues I've noticed with PanResponder is that people assume it is an all or nothing. \nBy that I mean adding a PanResponder in a parent view means it will steal all of your touches and `Touchable` items won't be touchable any longer.\n\nYou may be running into this because you copy and pasted it from here the documentation here [https://facebook.github.io/react-native/docs/panresponder.html](https://facebook.github.io/react-native/docs/panresponder.html) and it includes a capture phase returning true.\n(I copy and paste this all the time).\nWe'll talk about the capture phase next.\n","technology":{"id":2,"name":"React Native","image":"https://images.codedaily.io/icons/react.svg","social_tags":"#reactnative"},"social_tags":"#reactnative","image":"https://i.imgur.com/r1eZgLn.gif","created_at":"2017-03-02T06:27:24.668Z","published_at":null,"user":{"name":"Jason Brown","image":null}},"content":[{"id":1,"created_at":"2017-03-02T06:27:24.463Z","updated_at":"2017-11-27T18:36:05.189Z","title":"Maintain Touchable Items with a Parent PanResponder in React Native","description":"## What Are We Building\n\n![https://i.imgur.com/r1eZgLn.gif](https://i.imgur.com/r1eZgLn.gif)\n## Intro\n\nOne of the issues I've noticed with PanResponder is that people assume it is an all or nothing. \nBy that I mean adding a PanResponder in a parent view means it will steal all of your touches and `Touchable` items won't be touchable any longer.\n\nYou may be running into this because you copy and pasted it from here the documentation here [https://facebook.github.io/react-native/docs/panresponder.html](https://facebook.github.io/react-native/docs/panresponder.html) and it includes a capture phase returning true.\n(I copy and paste this all the time).\nWe'll talk about the capture phase next.\n","duration":null,"image_small":null,"image_medium":null,"image_large":null,"data_type":"markdown","data":"## What Are We Building\n\n![https://i.imgur.com/r1eZgLn.gif](https://i.imgur.com/r1eZgLn.gif)\n## Intro\n\nOne of the issues I've noticed with PanResponder is that people assume it is an all or nothing. \nBy that I mean adding a PanResponder in a parent view means it will steal all of your touches and `Touchable` items won't be touchable any longer.\n\nYou may be running into this because you copy and pasted it from here the documentation here [https://facebook.github.io/react-native/docs/panresponder.html](https://facebook.github.io/react-native/docs/panresponder.html) and it includes a capture phase returning true.\n(I copy and paste this all the time).\nWe'll talk about the capture phase next.\n\nThis is far from the case. As always, React Native internal code is all built on the same components you are using so be sure and always read that code.\nNavigation is one example that uses a top level PanResponder and only deals with touches on the outer edge of the screen.\n\nReal internal react native example code for [NavigationExperimental here](https://github.com/facebook/react-native/blob/a2fb703bbb988038323c55b29b40e8f5ff52966d/Libraries/CustomComponents/NavigationExperimental/NavigationCardStackPanResponder.js#L97)\n\n## Example code\n\nYou can grab the full code in this repo here.\n\n[https://github.com/browniefed/react-native-parent-panresponder-touch](https://github.com/browniefed/react-native-parent-panresponder-touch)\n\n## General PanResponder\n\nThe React Native folk built the gesture responding system very similar to the web. The gesture system has a capture phase, just like the web.\nIf you didn't know about the capture system on the web, there is one. The events go from a capture phase and back up through the bubble phase.\nYou may have heard of \"event bubbling\" where the event starts at the inner most child then moves up each element.\nHowever before that the `capture` phase triggered and traversed from the top down to the element you clicked.\n\n`top =\u003e #random_parent =\u003e #random_child2 =\u003e thing you clicked =\u003e #random_child2 =\u003e #random_parent =\u003e top`\n\nThe capture phase in React Native has two phases per PanResponder. It has `onStartShouldSetResponderCapture` and `onMoveShouldSetResponderCapture`.\nThe `onStartShouldSetResponderCapture` is called on the beginning touch, and `onMoveShouldSetResponderCapture` is called on every time you move your finger.\n\nAfter the capture phase the bottom level touched view will then move back up the chain.\nThe `onStartShouldSetResponder` function will be called on initial press, then `onMoveShouldSetResponder` will be called each movement of the finger.\n\nAt any point that a capture phase, or non capture phase returns `true` that `PanResponder` will receive the gesture.\nIn that case `onResponderGrant` will be called, then `onResponderMove`, then eventually when the user removes their finger `onResponderRelease`.\n\nNow do remember the capture and bubble phase are happening on **EACH** finger movement. \nSo that means if a parent view returns true in `onMoveShouldSetResponderCapture` phase then the touch will be taken away from the other active `PanResponder`\n\nWhen that happens `onResponderTerminationRequest` is called on the active `PanResponder` if it returns true then `onResponderTerminate` is called.\nBasically you said \"Sure whatever else wants the gesture they can have it\".\n\nFinally when the OS steals the gesture (like when you swipe down the notification center), the `onResponderTerminationRequest` function is called.\n\nAll of these are generally setup to just return `true` for you so that the generally appropriate actions are taken.\n\n## PanResponder Best Practices\n\nAll of that being said. Don't use the `capture` phase, you will rarely ever use it much like the web.\nStick to the function calls without `capture`.\n\nWhen you need something, you need to decide `do I want to do it on the first press` or `do I want to do it on every movement`.\nSo that means you return true from `onStartShouldSetResponder` or `onMoveShouldSetResponder`\n\nMostly the reason you don't ever use these is as the default says \"The deepest element gets focus\". Aka a button you pressed gets pressed, typically that's what you want.\n\n## What the hell does this mean?\n\nIt means\n```\n\u003cSpecialViewToDoThings\u003e\n    \u003cSomeCrazyScrollView\u003e\n        \u003cTouchableOpacity\u003e\n            \u003cText\u003eLook a button\u003c/Text\u003e\n        \u003c/TouchableOpacity\u003e\n    \u003c/SomeCrazyScrollView\u003e\n\u003c/SpecialViewToDoThings\u003e\n```\n\nWithout `capture` phases, `TouchableOpacity` `onPress` will get the touch.\nWith a `capture` phase returning true `SpecialViewToDoThings` will get touch.\n`SomeCrazyScrollView` will get the scroll when someone doesn't press a `TouchableOpacity` and `SpecialViewToDoThings` doesn't return true from a capture phase.\n\n## WHY DIDN'T THEY SAY ANY OF THIS!?!?!?\n\nOh don't worry, none of this information is new, it's in the docs [https://facebook.github.io/react-native/docs/gesture-responder-system.html](https://facebook.github.io/react-native/docs/gesture-responder-system.html)\n\nStill not clear? Lets do some code. This will just show you how to make internal touchable things and still capture touches with a parent `PanResponder`.\n\n## Create a PanResponder\n\nFirst we need to create a `PanResponder`. If you look at the documentation you'll notice many of the functions are not necessary, and or default to returning true.\nSo we'll \n\n```\ncomponentWillMount() {\n    this._panResponder = PanResponder.create({\n        onMoveShouldSetPanResponder:(evt, gestureState) =\u003e true,\n        onPanResponderMove: (evt, gestureState) =\u003e {\n            // DO JUNK HERE\n        }\n    });\n}\n```\n\n## All the available stuff\n\nI won't type it all out. It's all in the documentation [https://facebook.github.io/react-native/docs/panresponder.html](https://facebook.github.io/react-native/docs/panresponder.html)\n\n## Create a simple view\n\nWe start by creating  a `View` with some styles and setup some state for the button.\n```\nclass PanResponderTest extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      zone: \"Still Touchable\"\n    }\n\n    this.onPress = this.onPress.bind(this);\n  }\n\n  onPress() {\n    this.setState({\n      zone: \"I got touched with a parent pan responder\"\n    })\n  }\n\n  render() {\n    return (\n      \u003cView style={styles.container}\u003e\n        \u003cView style={styles.zone1} /\u003e\n        \u003cView style={styles.center}\u003e\n          \u003cTouchableOpacity onPress={this.onPress}\u003e\n            \u003cText\u003e{this.state.zone}\u003c/Text\u003e\n          \u003c/TouchableOpacity\u003e\n        \u003c/View\u003e\n        \u003cView style={styles.zone2} /\u003e\n      \u003c/View\u003e\n    );\n  }\n}\n```\nWe create a top level container (which will receive the `PanResponder`). 2 zones, one red, and one blue. These will be special zones for touch registering. \nThen finally a `TouchableOpacity` button. This will simulate some internal item you want pressed while having an external `PanResponder`.\n\n```\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  center: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\" \n  },\n  zone1: {\n    top: 40,\n    left: 0,\n    right: 0,\n    height: 50,\n    position: 'absolute',\n    backgroundColor: \"red\"\n  },\n  zone2: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 50,\n    position: 'absolute',\n    backgroundColor: \"blue\"\n  }\n});\n```\nWe will center the button, and put our special zones at the top and bottom.\n\n`TouchableOpacity` uses `PanResponder` to detect touches, so it will play into the bubble and capture phases.\nThe zones have no `PanResponder` gestures registered so it won't play into the capture and bubble phases.\n\n## Limit it to region\n\nThis line `onMoveShouldSetPanResponder:(evt, gestureState) =\u003e true` always returns true so the element will always accept.\nAlso we aren't using the `capture` phase so the `TouchableOpacity` will always be pressable.\nHowever our parent `PanResponder` will get triggered when we don't press the button.\n\n## Limit it to distance moved\n\n`moveX` and `moveY` are the current coordinate positions of the `gestureState`.\n`dx` and `dy` are the distance change from where the initial finger was put down (delta X and delta Y).\n\n```\nconst getDirectionAndColor = ({ moveX, moveY, dx, dy}) =\u003e {\n  const draggedDown = dy \u003e 30;\n  const draggedUp = dy \u003c -30;\n  const draggedLeft = dx \u003c -30;\n  const draggedRight = dx \u003e 30;\n  const isRed = moveY \u003c 90 \u0026\u0026 moveY \u003e 40 \u0026\u0026 moveX \u003e 0 \u0026\u0026 moveX \u003c width;\n  const isBlue = moveY \u003e (height - 50) \u0026\u0026 moveX \u003e 0 \u0026\u0026 moveX \u003c width;\n  let dragDirection = '';\n\n  if (draggedDown || draggedUp) {\n    if (draggedDown) dragDirection += 'dragged down '\n    if (draggedUp) dragDirection +=  'dragged up ';\n  }\n\n  if (draggedLeft || draggedRight) {\n    if (draggedLeft) dragDirection += 'dragged left '\n    if (draggedRight) dragDirection +=  'dragged right ';\n  }\n\n  if (isRed) return `red ${dragDirection}`\n  if (isBlue) return `blue ${dragDirection}`\n  if (dragDirection) return dragDirection;\n}\n```\n\nWe define that if a user moves their finger in a direction further than 30 pixels than we'll trigger a direction.\nAlso if they are within the absolutely positioned zones we'll tag them with `red` or `blue`.\n\nThis function will return nothing if we haven't dragged a finger greater than 30 pixels, and or we aren't in a particular zone.\n\n## Where does this function go?\n\nSince our `getDirectionAndColor` function will return either `truthy` or `falsy` values we can pass that right into our `onMoveShouldSetPanResponder`.\nThis means when it returns `truthy` our `onPanResponderMove`. We then recall the function and then call `setState` to update the button text.\n\n```\n  componentWillMount() {\n    this._panResponder = PanResponder.create({\n      onMoveShouldSetPanResponder:(evt, gestureState) =\u003e !!getDirectionAndColor(gestureState),\n      onPanResponderMove: (evt, gestureState) =\u003e {\n        const drag = getDirectionAndColor(gestureState);\n        this.setState({\n          zone: drag,\n        })\n      },\n    });\n  }\n```\n\nFinally we need to add our `PanResponder` to the parent `View` like so\n\n```\n  render() {\n    return (\n      \u003cView style={styles.container} {...this._panResponder.panHandlers}\u003e\n        \u003cView style={styles.zone1} /\u003e\n        \u003cView style={styles.center}\u003e\n          \u003cTouchableOpacity onPress={this.onPress}\u003e\n            \u003cText\u003e{this.state.zone}\u003c/Text\u003e\n          \u003c/TouchableOpacity\u003e\n        \u003c/View\u003e\n        \u003cView style={styles.zone2} /\u003e\n      \u003c/View\u003e\n    );\n  }\n```\n\n## Potential uses\n\nYou can use the `onLayout` callback from any component to then define your layout constraints for your PanResponder.\nYou could position things off screen then drag them on screen by triggering an `Animated` value while your current view stays touchable.\n\nThere are all of the potential use cases, it's all about what you need to accomplish and or what your product manager wants.\n\n\n## Final code\n\nThat's it. Go forth and gesture.\n\nOnce again our full code example is up here\n[https://github.com/browniefed/react-native-parent-panresponder-touch](https://github.com/browniefed/react-native-parent-panresponder-touch)\n\n![https://i.imgur.com/r1eZgLn.gif](https://i.imgur.com/r1eZgLn.gif)","code":"https://github.com/browniefed/react-native-parent-panresponder-touch","user_id":null,"technology_id":2,"tags":"react-native, panresponder, touchable","download_link":null,"type":null,"source":null,"sponsored":null,"_pivot_id":1,"_pivot_tutorial_id":1,"_pivot_fragment_id":1,"_pivot_order":0,"order":0}]}}},"page":"/tutorials/tutorial","pathname":"/tutorials/tutorial","query":{"id":"1","slug":"Maintain-Touchable-Items-with-a-Parent-PanResponder-in-React-Native"},"buildId":"Zm7bnEJTUTeEuV3P9PUMJ","ids":["0","24nf7c","yyh7cr","q7ikx9","ydkf2t","cn364u","1mra26b","13gzsmf","18t8hgp","cybom1","1ycny1a","1cb436f","v7hg16","1raousg","1manadv","97vdgs","chw5zt","e18paf","1tlkawq","1xac0s9","1m030y7","1m7e2z","1pqmedy","1m4wy5f","1830x7h","kr2nmy","qar1bk","eku11f","1i6pfy0","etd6cy","miq6iv","1aq6k0v","9kv50g","v360tt","zrypnw","1ofqig9","sjfvfw","arkg5h","12fiv2e","1tyn5zp","1r7d14y","4399yi","1xd8cnp","1se5wrl","rkk3mp","5j4so5","hpifob","g59ihq","ezyc4k","126fjsd","1uk8qt2","1x65ygl","1521j9w","1ulvkyq"]};__NEXT_LOADED_PAGES__=[];__NEXT_REGISTER_PAGE=function(r,f){__NEXT_LOADED_PAGES__.push([r, f])}</script><script async="" id="__NEXT_PAGE__/tutorials/tutorial" src="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/tutorial.js"></script><script async="" id="__NEXT_PAGE__/_app" src="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/_app.js"></script><script async="" id="__NEXT_PAGE__/_error" src="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/_error.js"></script><script src="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/webpack-42652fa8b82c329c0559.js" async=""></script><script src="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/commons.77ab52d20c6ac164de9c.js" async=""></script><script src="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/main-ad5bf7ed917e35cbacf3.js" async=""></script><script src="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/tutorials.js"></script><script src="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/screencasts.js"></script><script src="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/courses.js"></script><script src="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/login.js"></script><script src="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/register.js"></script><script src="./Code Daily - Tutorial - Maintain Touchable Items with a Parent PanResponder in React Native_files/screencast.js"></script></body><div style="display: block; opacity: 1;"></div></html>