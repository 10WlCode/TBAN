webpackJsonp([0x81b8806e4260],{"./node_modules/json-loader/index.js!./.cache/json/index.json":function(n,a){n.exports={data:{site:{siteMetadata:{title:"Magicly's Blog"}},allMarkdownRemark:{edges:[{node:{html:'<p>收集的一些密码学学习资料。</p>\n<!-- more -->\n<ul>\n<li><a href="https://book.douban.com/subject/26822106/">图解密码技术</a>，这个入门很好。</li>\n<li><a href="https://www.khanacademy.org/computing/computer-science/cryptography">可汗学院的密码学入门课程</a>， 网易公开课翻译了其中一部分<a href="http://open.163.com/special/Khan/moderncryptography.html">可汗学院公开课：现代密码学</a>。</li>\n<li>Cousera上的<a href="https://www.coursera.org/learn/crypto/home/welcome">crypto</a>， 有点难度， studying…</li>\n<li><a href="https://www.coursera.org/learn/number-theory-cryptography">Number Theory and Cryptography</a></li>\n<li><a href="https://www.coursera.org/specializations/applied-crypto">Applied Cryptography Specialization</a></li>\n<li><a href="https://www.coursera.org/learn/cryptography">Cryptography</a></li>\n<li><a href="https://classroom.udacity.com/courses/cs387">Udacity Applied Cryptography</a></li>\n<li><a href="https://www.zhihu.com/question/36289177">如何在一个月内入门密码学？</a>和<a href="https://www.zhihu.com/question/23788427">求大触们推荐一些比较系统的关于密码加密解密的书籍？</a>里面的一些资料</li>\n<li><a href="https://crypto.stanford.edu/">Standford密码学组</a></li>\n</ul>',timeToRead:1,excerpt:"收集的一些密码学学习资料。 图解密码技术 ，这个入门很好。 可汗学院的密码学入门课程 ， 网易公开课翻译了其中一部分 可汗学院公开课：现代密码学 。 Cousera上的 crypto ， 有点难度， studying… Number Theory and Cryptography...",fields:{slug:"/blockchain-15-crypto-learning/"},frontmatter:{title:"区块链系列十五：密码学学习资料",date:"2018-08-18",category:"Blockchain",tags:["crypto","密码"]}}},{node:{html:'<p>网上有很多好的资料介绍ECC， 我就不做搬运工了。给一下链接自己看吧。</p>\n<!-- more -->\n<ul>\n<li><a href="https://www.zhihu.com/question/22399196">https://www.zhihu.com/question/22399196</a></li>\n<li><a href="https://www.zhihu.com/question/26662683">https://www.zhihu.com/question/26662683</a></li>\n<li><a href="https://arstechnica.com/information-technology/2013/10/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/2/">https://arstechnica.com/information-technology/2013/10/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/2/</a></li>\n<li><a href="https://www.youtube.com/watch?v=dCvB-mhkT0w">https://www.youtube.com/watch?v=dCvB-mhkT0w</a></li>\n<li><a href="http://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/">http://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/</a></li>\n<li><a href="https://www.cnblogs.com/qcblog/p/8998045.html">https://www.cnblogs.com/qcblog/p/8998045.html</a></li>\n<li><a href="https://www.certicom.com/content/certicom/en/ecc-tutorial.html">https://www.certicom.com/content/certicom/en/ecc-tutorial.html</a></li>\n<li><a href="https://medium.com/@VitalikButerin/exploring-elliptic-curve-pairings-c73c1864e627">https://medium.com/@VitalikButerin/exploring-elliptic-curve-pairings-c73c1864e627</a></li>\n</ul>',timeToRead:1,excerpt:"网上有很多好的资料介绍ECC， 我就不做搬运工了。给一下链接自己看吧。 https://www.zhihu.com/question/22399196 https://www.zhihu.com/question/26662683 https://arstechnica.com...",fields:{slug:"/blockchain-14-ecc/"},frontmatter:{title:"区块链系列十四：elliptic curve cryptography",date:"2018-08-17",category:"Blockchain",tags:["Ethereum","以太坊","签名","ECC","椭圆曲线"]}}},{node:{html:'<p>要在eth链上验证一个签名， 可以用solidity内置的<code>ecrecover</code>函数， 但是。。。。</p>\n<!-- more -->\n<h1 id="ecrecover"><a href="#ecrecover" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ecrecover</h1>\n<p>可以先用这两个工具试一下：</p>\n<ul>\n<li><a href="https://etherscan.io/verifySig">https://etherscan.io/verifySig</a></li>\n<li><a href="https://www.myetherwallet.com/signmsg.html">https://www.myetherwallet.com/signmsg.html</a></li>\n</ul>\n<p>myetherwallet这个我感觉有点问题， 对于带<code>0x</code>的message签名出来跟我调用<code>web3.eth.sign</code>或者etherscan的签名不一样， 估计是把<code>0x</code>开头的消息特殊处理了。</p>\n<p>签名可以直接通过web3.js的<code>web3.eth.sign</code>去签名， 实际上还是走的<code>eth client</code>的签名。 然而要验证签名， 居然eth client没有提供这个功能， 网上教程全是部署一个合约， 然后用solidity的<code>ecrecover</code>去验证的， 感觉好奇怪。 </p>\n<h2 id="几个坑"><a href="#%E5%87%A0%E4%B8%AA%E5%9D%91" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>几个坑</h2>\n<h3 id="rsv的获取"><a href="#rsv%E7%9A%84%E8%8E%B7%E5%8F%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>r/s/v的获取</h3>\n<p>根据<a href="https://github.com/ethereum/wiki/wiki/JavaScript-API#web3ethsign">官方文档</a>说法， 签名出来表示成hex是<code>0x...</code>， 如果把<code>0x</code>一起算上总长度是130哦，最好理解的是如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment" spellcheck="true">// https://ethereum.stackexchange.com/questions/15364/ecrecover-from-geth-and-web3-eth-sign</span>\n    <span class="token keyword">var</span> h <span class="token operator">=</span> web3<span class="token punctuation">.</span><span class="token function">sha3</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>\n    <span class="token keyword">var</span> sig <span class="token operator">=</span> web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n    <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token template-string"><span class="token string">`0x</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sig<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>\n    <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token template-string"><span class="token string">`0x</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sig<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>\n    <span class="token keyword">var</span> v <span class="token operator">=</span> web3<span class="token punctuation">.</span><span class="token function">toDecimal</span><span class="token punctuation">(</span>sig<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">27</span>\n</code></pre>\n      </div>\n<p>注意， v要加27哦， <a href="https://github.com/ethereum/web3.js/blob/develop/example/signature-verifier.js#L119-L124">web3.js里的example</a>就没有添加， 而且注意那段代码里的sig是含<code>0x</code>的， 所以长度是132！！！</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">splitSig</span><span class="token punctuation">(</span>sig<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    v<span class="token punctuation">:</span> ethWeb3<span class="token punctuation">.</span><span class="token function">toDecimal</span><span class="token punctuation">(</span><span class="token string">\'0x\'</span> <span class="token operator">+</span> sig<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">132</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    r<span class="token punctuation">:</span> sig<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    s<span class="token punctuation">:</span> sig<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>因为sig含了<code>0x</code>， 所以r取<code>sig.slice(0, 66)</code>已经有了<code>0x</code>， 而s还没有， 所以在<a href="https://github.com/ethereum/web3.js/blob/develop/example/signature-verifier.js#L114">114行</a>， 加了<code>0x</code>， 导致代码很难读：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code> <span class="token keyword">var</span> finalAddress<span class="token operator">=</span>sigContractInstance<span class="token punctuation">.</span>verify<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>strPrefixedMsg<span class="token punctuation">,</span> res<span class="token punctuation">.</span>v<span class="token punctuation">,</span> res<span class="token punctuation">.</span>r<span class="token punctuation">,</span> <span class="token string">\'0x\'</span><span class="token operator">+</span> res<span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h3 id="自定义前缀"><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%89%8D%E7%BC%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>自定义前缀</h3>\n<p>为了避免<a href="https://github.com/ethereum/go-ethereum/issues/3731">arbitrary payloads</a>的问题， eth里的签名添加了<code>\\x19Ethereum Signed Message:\\n&#x3C;length of message></code>前缀， 所以要用<code>ecrecover</code>去verify的时候， 也要加上！</p>\n<h1 id="不用eecrecover"><a href="#%E4%B8%8D%E7%94%A8eecrecover" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>不用eecrecover</h1>\n<p>如果我只是要验证签名（不需要在链上验证）， 完全没有理由说我还要部署一个smart contract去做这个事情啊。</p>\n<p>bitcoin和eth都用的是ECC(elliptic curve cryptography)， eth用的是secp256k1， 这个是有标准的， 理论上而言， 你用任何语言都可以实现（实际上也是有各种语言版本的开源代码啦）。</p>\n<p>至于为什么都用ECC而不是常见的RSA呢， 简单来说， 同样的安全强度， ECC有更短的private key和更快的速度。</p>\n<p>后面专门写一篇介绍ECC。</p>\n<h1 id="refs"><a href="#refs" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Refs</h1>\n<ul>\n<li><a href="https://medium.com/@angellopozo/ethereum-signing-and-validating-13a2d7cb0ee3">https://medium.com/@angellopozo/ethereum-signing-and-validating-13a2d7cb0ee3</a></li>\n<li><a href="https://github.com/ethereum/go-ethereum/issues/3731">https://github.com/ethereum/go-ethereum/issues/3731</a></li>\n<li><a href="https://gist.github.com/bas-vk/d46d83da2b2b4721efb0907aecdb7ebd">https://gist.github.com/bas-vk/d46d83da2b2b4721efb0907aecdb7ebd</a></li>\n<li><a href="https://medium.com/taipei-ethereum-meetup/%E7%94%A8ecrecover%E4%BE%86%E9%A9%97%E7%B0%BD%E5%90%8D-694fa8ae3638">https://medium.com/taipei-ethereum-meetup/%E7%94%A8ecrecover%E4%BE%86%E9%A9%97%E7%B0%BD%E5%90%8D-694fa8ae3638</a></li>\n<li><a href="https://ethereum.stackexchange.com/questions/15364/ecrecover-from-geth-and-web3-eth-sign">https://ethereum.stackexchange.com/questions/15364/ecrecover-from-geth-and-web3-eth-sign</a></li>\n<li><a href="http://me.tryblockchain.org/web3js-sign-ecrecover-decode.html">http://me.tryblockchain.org/web3js-sign-ecrecover-decode.html</a></li>\n<li><a href="http://me.tryblockchain.org/web3js-sign-ecrecover-decode.html">http://me.tryblockchain.org/web3js-sign-ecrecover-decode.html</a></li>\n</ul>',timeToRead:3,excerpt:"要在eth链上验证一个签名， 可以用solidity内置的 函数， 但是。。。。 ecrecover 可以先用这两个工具试一下： https://etherscan.io/verifySig https://www.myetherwallet.com/signmsg.html...",fields:{slug:"/blockchain-13-sign-and-verify/"},frontmatter:{title:"区块链系列十三：sign & verify",date:"2018-08-16",category:"Blockchain",tags:["Ethereum","以太坊","签名"]}}},{node:{html:'<p>区块链的一些工具、有意思的文章等。 </p>\n<!-- more -->\n<ul>\n<li><a href="https://github.com/pirapira/ethereum-word-list">https://github.com/pirapira/ethereum-word-list</a></li>\n</ul>',timeToRead:1,excerpt:"区块链的一些工具、有意思的文章等。  https://github.com/pirapira/ethereum-word-list",fields:{slug:"/blockchain-12-misc/"},frontmatter:{title:"区块链系列十二：Misc",date:"2018-08-15",category:"Blockchain",tags:["BTC","Ethereum","以太坊"]}}},{node:{html:'<p><a href="https://truffleframework.com/">Truffle</a>框架很好用， <a href="https://github.com/ethereum/web3.js">web3.js</a>让你可以在js里很方便的通过<a href="https://github.com/ethereum/wiki/wiki/JSON-RPC">JSON-RPC</a>跟调用<a href="http://www.ethdocs.org/en/latest/ethereum-clients/index.html">eth client</a>的功能， <a href="https://infura.io/">infura</a>可以让你不用自己搭建client。  eth同步是一个很痛苦的事情！</p>\n<!-- more -->\n<h1 id="truffle"><a href="#truffle" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Truffle</h1>\n<p>truffle很不错的框架， 很多项目都在用， 包括<a href="https://github.com/OpenZeppelin/openzeppelin-solidity">OpenZeppelin</a>。  ps， 据说<a href="https://embark.status.im/">Embark</a>也很不错， 有机会试一下。</p>\n<p>提供了compile, test, deploy等， 还提供了一个client， 方便开发测试。 建议把docs和tutorials都阅读一下。</p>\n<h1 id="infura"><a href="#infura" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>infura</h1>\n<p><a href="https://infura.io/">infura</a>提供了一套client， 可以不用自己部署ETH client了。</p>\n<p><a href="https://medium.com/taipei-ethereum-meetup/ethereum-%E6%99%BA%E8%83%BD%E5%90%88%E7%B4%84%E9%96%8B%E7%99%BC%E7%AD%86%E8%A8%98-%E4%B8%8D%E7%94%A8%E8%87%AA%E5%B7%B1%E8%B7%91%E7%AF%80%E9%BB%9E-%E4%BD%BF%E7%94%A8-infura-%E5%92%8C-web3-js-%E5%91%BC%E5%8F%AB%E5%90%88%E7%B4%84-2b8c852ed3d2">Ethereum 智能合約開發筆記】不用自己跑節點，使用 Infura 和 web3.js 呼叫合約</a></p>\n<p>truffle跟infura结合使用， 可以参考<a href="https://truffleframework.com/tutorials/using-infura-custom-provider">https://truffleframework.com/tutorials/using-infura-custom-provider</a> 。</p>\n<h1 id="web3js"><a href="#web3js" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>web3.js</h1>\n<p><a href="https://github.com/ethereum/web3.js">https://github.com/ethereum/web3.js</a> 简化了js通过JSON-RPC调用eth client的过程， 注意目前是1.0 beta， 跟truffle用的0.2接口不一致。</p>\n<h1 id="web3的其他语言实现"><a href="#web3%E7%9A%84%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>web3的其他语言实现</h1>\n<h2 id="java"><a href="#java" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>java</h2>\n<ul>\n<li><a href="https://github.com/web3j/web3j">https://github.com/web3j/web3j</a></li>\n<li><a href="https://www.jianshu.com/p/ae80a869366e">https://www.jianshu.com/p/ae80a869366e</a></li>\n</ul>\n<h2 id="c"><a href="#c" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>C</h2>\n<p><a href="https://github.com/Nethereum/Nethereum">https://github.com/Nethereum/Nethereum</a></p>\n<p>当然你也可以完全自己封装一下json-rpc即可。</p>\n<h1 id="testnet"><a href="#testnet" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TestNet</h1>\n<p>要在TestNet上运行， 需要获取到一些eth， 可以在<a href="https://faucet.metamask.io/">MetaMask Ether Faucet</a>上领取。</p>\n<p>运行结果可以在<a href="https://ropsten.etherscan.io/">Etherscan</a>上查看。</p>\n<h1 id="一些问题"><a href="#%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>一些问题</h1>\n<p>如果把Ganache重启了可能遇到问题：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code>the tx doesn\'t have the correct nonce\n</code></pre>\n      </div>\n<p>原因是eth里每个账号都有递增的nonce， 来保证tx的唯一性。 metamask记住之前发过的tx， 而Ganache重启后， 全部重来， nonce对不上。 可以把<a href="https://stackoverflow.com/questions/45585735/testrpc-ganache-the-tx-doesnt-have-the-correct-nonce">MetaMask重置一下</a>。</p>\n<h1 id="一些工具"><a href="#%E4%B8%80%E4%BA%9B%E5%B7%A5%E5%85%B7" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>一些工具</h1>\n<ul>\n<li><a href="https://ethgasstation.info/">https://ethgasstation.info/</a></li>\n<li><a href="https://www.ethernodes.org/network/1">https://www.ethernodes.org/network/1</a></li>\n</ul>',timeToRead:2,excerpt:"Truffle 框架很好用，  web3.js 让你可以在js里很方便的通过 JSON-RPC 跟调用 eth client 的功能，  infura 可以让你不用自己搭建client。  eth同步是一个很痛苦的事情！ Truffle truffle...",fields:{slug:"/blockchain-11-eth-truffle-web3js-infura/"},frontmatter:{title:"区块链系列十一：Truffle/Web3.js/infura开发eth",date:"2018-08-14",category:"Blockchain",tags:["Ethereum","以太坊","trufle","web3.js","infura"]}}},{node:{html:'<p>区块链里面账户就是一对公私钥(public/private key)， 有了private key就有了一切， 丢失了就丢掉了所有的token， 没有密码找回！ 没有密码找回！ 没有密码找回！</p>\n<p>为了方便备份， 就有了通过Mnemonics来方便保存记忆private key的BIP39。</p>\n<!-- more -->\n<h1 id="bip39"><a href="#bip39" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>BIP39</h1>\n<p>可以先用这两个在线工具体验一下： <a href="https://iancoleman.io/bip39/">https://iancoleman.io/bip39/</a> , <a href="https://ethtools.com/ropsten/wallet/create/">https://ethtools.com/ropsten/wallet/create/</a> 。\n然后阅读<a href="https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki">BIP39</a>.</p>\n<p>大概思路就是初始化一个随机entropy， 比如128bits，然后加上sha256(128bits)， 取128 / 32 = 4位， 拼接起来， 每11为作为一个数字index， 去wordlist里面对应一个单词。 这个初始的128bits可以作为seed， 根据其他算法生成其他的private/public keys， 比如用<a href="https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki">Hierarchically Derived Keys — BIP32</a>。</p>\n<h2 id="ent"><a href="#ent" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ENT</h2>\n<p>有一些工具可以判断系统或者文件的entropy。</p>\n<ul>\n<li><a href="https://unix.stackexchange.com/questions/31779/tool-for-measuring-entropy-quality">https://unix.stackexchange.com/questions/31779/tool-for-measuring-entropy-quality</a></li>\n<li><a href="https://wiki.alpinelinux.org/wiki/Entropy_and_randomness">https://wiki.alpinelinux.org/wiki/Entropy<em>and</em>randomness</a></li>\n<li><a href="https://github.com/lsauer/entropy">https://github.com/lsauer/entropy</a></li>\n<li><a href="http://blog.iopsl.com/calculate-the-entropy-of-a-file-using-ent/">http://blog.iopsl.com/calculate-the-entropy-of-a-file-using-ent/</a></li>\n<li><a href="https://calomel.org/entropy_random_number_generators.html">https://calomel.org/entropy<em>random</em>number_generators.html</a> </li>\n<li></li>\n</ul>\n<h2 id="实现"><a href="#%E5%AE%9E%E7%8E%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>实现</h2>\n<p>有各种语言版本的实现， 阅读了<a href="https://github.com/bitcoinjs/bip39">bitcoinjs/bip39</a>，还算是蛮简单的。</p>\n<h2 id="utf-8-nfkd"><a href="#utf-8-nfkd" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>UTF-8 NFKD</h2>\n<ul>\n<li><a href="https://stackoverflow.com/questions/7931204/what-is-normalized-utf-8-all-about">https://stackoverflow.com/questions/7931204/what-is-normalized-utf-8-all-about</a></li>\n<li><a href="https://github.com/walling/unorm">https://github.com/walling/unorm</a></li>\n</ul>\n<h2 id="pbkdf2"><a href="#pbkdf2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>PBKDF2</h2>\n<ul>\n<li><a href="https://en.wikipedia.org/wiki/PBKDF2">https://en.wikipedia.org/wiki/PBKDF2</a></li>\n<li><a href="https://segmentfault.com/a/1190000004261009">https://segmentfault.com/a/1190000004261009</a></li>\n<li><a href="https://github.com/crypto-browserify/pbkdf2">https://github.com/crypto-browserify/pbkdf2</a></li>\n</ul>\n<h3 id="diceware"><a href="#diceware" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Diceware</h3>\n<ul>\n<li><a href="https://en.wikipedia.org/wiki/Diceware">https://en.wikipedia.org/wiki/Diceware</a> </li>\n<li><a href="http://world.std.com/~reinhold/diceware.html">http://world.std.com/~reinhold/diceware.html</a></li>\n</ul>\n<p>还发现一个<a href="http://www.dicewarepasswords.com/">小女儿在家掷骰子来帮别人选密码</a>， nb！</p>\n<h1 id="bip32"><a href="#bip32" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>BIP32</h1>\n<p><a href="https://bitcore.io/api/mnemonic/">https://bitcore.io/api/mnemonic/</a> 难懂一点。</p>\n<p>bitcore的JS实现： <a href="https://bitcore.io/api/lib/hd-keys">https://bitcore.io/api/lib/hd-keys</a> 。</p>\n<h1 id="ethereum的讨论"><a href="#ethereum%E7%9A%84%E8%AE%A8%E8%AE%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Ethereum的讨论</h1>\n<ul>\n<li><a href="https://github.com/ethereum/EIPs/issues/75">https://github.com/ethereum/EIPs/issues/75</a></li>\n<li><a href="https://github.com/ethereum/EIPs/issues/76">https://github.com/ethereum/EIPs/issues/76</a></li>\n</ul>',timeToRead:2,excerpt:"区块链里面账户就是一对公私钥(public/private key)， 有了private key就有了一切， 丢失了就丢掉了所有的token， 没有密码找回！ 没有密码找回！ 没有密码找回！ 为了方便备份， 就有了通过Mnemonics来方便保存记忆private key...",fields:{slug:"/blockchain-10-mnemonic/"},frontmatter:{title:"区块链系列十：Mnemonic和Hierarchically Derived Keys",date:"2018-08-14",category:"Blockchain",tags:["Mnemonic","Hierarchically Derived Keys","HDKeys","Ethereum","BTC","BIP39","BIP32"]}}},{node:{html:'<p>需要抓一个 app 的包， 不是 http， 一开始以为是 websocket 走了一些弯路， 最后发现是 socket。</p>\n<!-- more -->\n<h1 id="抓-httphttps"><a href="#%E6%8A%93-httphttps" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>抓 Http/Https</h1>\n<p>这个很容易， 有很多 proxy 可以， 比如 charles, fiddler, mitmproxy 等， 以及很多开源项目， 用 go 写的， 用 nodejs 写的都很多， 比如：</p>\n<ul>\n<li><a href="https://github.com/nodejitsu/node-http-proxy">https://github.com/nodejitsu/node-http-proxy</a></li>\n<li><a href="https://github.com/alibaba/anyproxy">https://github.com/alibaba/anyproxy</a></li>\n<li><a href="https://github.com/avwo/whistle">https://github.com/avwo/whistle</a></li>\n<li><a href="https://github.com/snail007/goproxy">https://github.com/snail007/goproxy</a></li>\n<li><a href="https://github.com/elazarl/goproxy">https://github.com/elazarl/goproxy</a></li>\n</ul>\n<p>这里遇到一个坑， android7.0 之后已经抓不到 https 包了， 哪怕你装了证书， 还需要在 app 内部配置， 也就是说你只能抓自己的 app 的包， 或者破解别人的 app 更改配置后重新打包， 或者 root 之后用 Xposed 的插件 JustTrueMe。</p>\n<ul>\n<li><a href="https://pediy.com/thread-219283.htm">https://pediy.com/thread-219283.htm</a></li>\n<li><a href="https://www.jianshu.com/p/e1ffb66e459c">https://www.jianshu.com/p/e1ffb66e459c</a></li>\n<li><a href="https://blog.csdn.net/u011045726/article/details/76064048">https://blog.csdn.net/u011045726/article/details/76064048</a></li>\n</ul>\n<h1 id="ios-抓-socket-包"><a href="#ios-%E6%8A%93-socket-%E5%8C%85" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ios 抓 socket 包</h1>\n<p>转战 ios 抓， https 抓到了。发现 charles 里面看不到， 因为是 realtime 应用， 考虑估计用的是 websocket， 然后考虑把 ios 的流量全部导入代理（普通的只能代理 http/https）。</p>\n<p>有人推荐了用 rvi 或者 mac 共享热点的方式， 然后用 wireshark 抓：</p>\n<ul>\n<li><a href="https://www.jianshu.com/p/eeb7fd12ef11">https://www.jianshu.com/p/eeb7fd12ef11</a></li>\n<li><a href="https://blog.netspi.com/intercepting-native-ios-application-traffic/">https://blog.netspi.com/intercepting-native-ios-application-traffic/</a></li>\n<li><a href="http://www.find-bug.com/archives/4901">http://www.find-bug.com/archives/4901</a></li>\n<li><a href="https://www.v2ex.com/t/383671">https://www.v2ex.com/t/383671</a></li>\n<li><a href="https://www.zhihu.com/question/20467503">https://www.zhihu.com/question/20467503</a></li>\n<li><a href="https://github.com/sundy-li/wechat_brain/issues/18">https://github.com/sundy-li/wechat_brain/issues/18</a></li>\n</ul>\n<p>但是 wireshark 不能通过简单地导入 ssl 证书抓 https， 配置稍微复杂：</p>\n<ul>\n<li><a href="http://joji.me/zh-cn/blog/walkthrough-decrypt-ssl-tls-traffic-https-and-http2-in-wireshark">http://joji.me/zh-cn/blog/walkthrough-decrypt-ssl-tls-traffic-https-and-http2-in-wireshark</a></li>\n<li><a href="https://imququ.com/post/how-to-decrypt-https.html">https://imququ.com/post/how-to-decrypt-https.html</a></li>\n<li><a href="https://imququ.com/post/http2-traffic-in-wireshark.html">https://imququ.com/post/http2-traffic-in-wireshark.html</a></li>\n</ul>\n<p>后来发现 android 可以用 Drony 代理 socks 代理， ios 应该也有吧。 找了好久终于发现可以用 AnyLink， 免费好用！</p>\n<p>然后就简单了， 开启 socks5 代理， 将全部流量导入 charles，charles 是支持 websocket 的， 结果发现其实是普通 socket， 也 ok。</p>\n<p>然而 charles 貌似不能编程， 那很简单， 找一个支持 tcp 的开源代理项目就 ok 了。</p>\n<ul>\n<li><a href="https://github.com/armon/go-socks5">https://github.com/armon/go-socks5</a></li>\n<li><a href="https://github.com/mscdex/socksv5">https://github.com/mscdex/socksv5</a></li>\n</ul>\n<p>懒得看，何不自己用 node.js 自己写一个， 几行代码的事情：</p>\n<ul>\n<li><a href="https://github.com/whtiehack/socket-proxy">https://github.com/whtiehack/socket-proxy</a></li>\n<li><a href="https://my.oschina.net/waterbear/blog/289739">https://my.oschina.net/waterbear/blog/289739</a></li>\n<li><a href="https://github.com/gonzalo123/nodejs.tcp.proxy">https://github.com/gonzalo123/nodejs.tcp.proxy</a></li>\n</ul>\n<p>但是发现获取不到目标 ip 地址， 直接获取到的都是代理地址， 找了个项目</p>\n<ul>\n<li><a href="https://github.com/mscdex/socksv5">https://github.com/mscdex/socksv5</a></li>\n</ul>\n<p>这个可以得到目标地址，具体实现是自己去解析 tcp 包， 这个是 socks5 的规范。</p>\n<blockquote>\n<p>DSTPORT andDSTIP 两个域分别是目标主机的端口和 IP 地址。</p>\n</blockquote>\n<ul>\n<li><a href="https://blog.csdn.net/kalman2008/article/details/45919741">https://blog.csdn.net/kalman2008/article/details/45919741</a></li>\n</ul>\n<p>剩下的就是分析包了。</p>\n<p>一些可能有用的资料：</p>\n<ul>\n<li><a href="https://github.com/txthinking/brook">https://github.com/txthinking/brook</a></li>\n<li><a href="https://5socks.net/Manual/rdp_iphone_eng.htm">https://5socks.net/Manual/rdp<em>iphone</em>eng.htm</a></li>\n<li><a href="https://github.com/chrisballinger/ProxyKit">https://github.com/chrisballinger/ProxyKit</a></li>\n<li><a href="https://github.com/twotreeszf/PrettyTunnel">https://github.com/twotreeszf/PrettyTunnel</a></li>\n<li><a href="https://github.com/halogenica/iphone-socks-proxy">https://github.com/halogenica/iphone-socks-proxy</a></li>\n</ul>\n<p>Android 破解的一些资料：</p>\n<ul>\n<li><a href="http://www.520monkey.com/">http://www.520monkey.com/</a></li>\n<li><a href="https://www.anquanke.com/post/id/91588">https://www.anquanke.com/post/id/91588</a></li>\n<li><a href="https://blog.csdn.net/guolin_blog/article/details/49738023">https://blog.csdn.net/guolin_blog/article/details/49738023</a></li>\n<li><a href="https://www.jianshu.com/p/9e0d1c3e342e">https://www.jianshu.com/p/9e0d1c3e342e</a></li>\n<li><a href="https://juejin.im/entry/585f3646da2f600065903ff7">https://juejin.im/entry/585f3646da2f600065903ff7</a></li>\n<li><a href="https://segmentfault.com/a/1190000005133219">https://segmentfault.com/a/1190000005133219</a></li>\n<li><a href="https://medium.com/@fwouts/blocking-websites-on-android-90958a1aca5">https://medium.com/@fwouts/blocking-websites-on-android-90958a1aca5</a></li>\n<li><a href="https://blog.csdn.net/dreamer2020/article/details/52761606">https://blog.csdn.net/dreamer2020/article/details/52761606</a></li>\n<li><a href="https://www.jianshu.com/p/eb766d2bb837">https://www.jianshu.com/p/eb766d2bb837</a></li>\n<li><a href="http://unclechen.github.io/2016/09/07/Android%E5%8F%8D%E7%BC%96%E8%AF%91%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/">http://unclechen.github.io/2016/09/07/Android%E5%8F%8D%E7%BC%96%E8%AF%91%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/</a></li>\n<li><a href="https://github.com/ufologist/onekey-decompile-apk">https://github.com/ufologist/onekey-decompile-apk</a></li>\n<li><a href="https://github.com/alibaba/dexposed">https://github.com/alibaba/dexposed</a></li>\n<li><a href="https://blog.csdn.net/jiangwei0910410003/article/details/51671019">https://blog.csdn.net/jiangwei0910410003/article/details/51671019</a></li>\n</ul>\n<p>nb 的项目： <a href="https://github.com/CellularPrivacy/Android-IMSI-Catcher-Detector">https://github.com/CellularPrivacy/Android-IMSI-Catcher-Detector</a></p>',
timeToRead:5,excerpt:"需要抓一个 app 的包， 不是 http， 一开始以为是 websocket 走了一些弯路， 最后发现是 socket。 抓 Http/Https 这个很容易， 有很多 proxy 可以， 比如 charles, fiddler, mitmproxy...",fields:{slug:"/ios-socket/"},frontmatter:{title:"手机抓socket包",date:"2018-06-22",category:"Network",tags:["socket","proxy","tcp"]}}},{node:{html:'<p>这两天整理一下以前的收藏夹， 发现很多以前花时间学过的但是早就不用了的技术资料， 心生感慨，记录下来留作纪念吧。</p>\n<p>很多已经打不开了， 而居然发现有些好几年前工作中写的代码还在线上， 惊喜。</p>\n<p><strong>排序没有啥意义， 只是整理顺序， 有些分类也不是很合理。 另外有些技术已经过时， 有些没有过时但是现在我不用了， 有些还在使用。</strong></p>\n<h1 id="前端"><a href="#%E5%89%8D%E7%AB%AF" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>前端</h1>\n<ul>\n<li>浏览器兼容性， IE6！！！</li>\n<li>jQuery 以及各种插件</li>\n<li>圆角实现</li>\n<li>各种编码乱码问题</li>\n<li>跨域</li>\n<li>用 Web 做 ppt</li>\n<li>各种浏览器（Firefox，Opera，Chrome， IE， Safari）以及插件</li>\n<li>HTTP 各种 status</li>\n<li>Cache</li>\n<li>Emmet</li>\n<li>Angular</li>\n<li>React</li>\n<li>浏览器插件开发</li>\n<li>微信公众号开发</li>\n<li>如何在手机上调试 H5</li>\n</ul>\n<h1 id="java"><a href="#java" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Java</h1>\n<ul>\n<li>阻塞非阻塞，同步异步， NIO， AIO</li>\n<li>Enum</li>\n<li>Classloader</li>\n<li>Netty</li>\n<li>Mina</li>\n<li>Excel</li>\n<li>Spring</li>\n<li>Hibernate</li>\n<li>Structs</li>\n<li>Servlet / JSP / JSTL</li>\n<li>Tomcat / Jetty</li>\n<li>Eclipse / Idea</li>\n<li>Ant</li>\n<li>Zookeeper</li>\n<li>设计模式</li>\n<li>Concurrency: JDK 库, fork/join, Disruptor, actor(Akka)</li>\n<li>内存模型</li>\n<li>Socket</li>\n<li>单点登录</li>\n<li>Session / Cookie</li>\n<li>计算各种对象所占内存大小</li>\n<li>安全地实现单例模式， Double-checked locking, Enum, Static class</li>\n<li>Annotations</li>\n</ul>\n<h1 id="编程语言"><a href="#%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>编程语言</h1>\n<ul>\n<li>Ruby</li>\n<li>Scala</li>\n<li>LISP / Clojure</li>\n<li>F#</li>\n<li>Haskell</li>\n<li>JS / TS</li>\n<li>CoffeeScript</li>\n<li>Flow</li>\n<li>AWK &#x26; Sed</li>\n<li>SML</li>\n<li>Lua</li>\n<li>C</li>\n<li>C++</li>\n<li>Object-C</li>\n<li>Swift</li>\n<li>Go</li>\n<li>Rust</li>\n<li>Python</li>\n<li>PHP</li>\n<li>Matlab / Octave</li>\n</ul>\n<p>有很多只是简单了解了下， 没有深入使用。 比较熟悉的有 Java/Scala/JS/TS, 现在用 Typescript 较多。</p>\n<h1 id="函数式编程"><a href="#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>函数式编程</h1>\n<h1 id="scala"><a href="#scala" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Scala</h1>\n<ul>\n<li>sbt</li>\n<li>scalaz</li>\n<li>Akka</li>\n<li>Spray</li>\n<li>Play!</li>\n<li>Lift</li>\n<li>Scalatra</li>\n<li>ScalaTest</li>\n<li>Scala.js</li>\n<li>Scala vim 开发环境配置</li>\n<li>Scala Android: scaloid</li>\n<li>Scala-ios</li>\n<li>Scala Native</li>\n</ul>\n<h1 id="app"><a href="#app" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>APP</h1>\n<ul>\n<li>Scala Android: scaloid</li>\n<li>Scala-ios， 还有其他语言开发 ios 的</li>\n<li>PhoneGap / Cordova</li>\n<li>ionicframework</li>\n<li>React Native</li>\n</ul>\n<h1 id="vim--emacs"><a href="#vim--emacs" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Vim &#x26; Emacs</h1>\n<p>两个都用过，花了时间去配置成<strong>IDE</strong>，现在主要用 VSCode / Idea / XCode。。。。Vim 最大的影响就是不管用什么编辑器或 IDE，都要装 Vim 插件， 不然很不习惯。</p>\n<h1 id="各种免费-fq-方式"><a href="#%E5%90%84%E7%A7%8D%E5%85%8D%E8%B4%B9-fq-%E6%96%B9%E5%BC%8F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>各种免费 FQ 方式</h1>\n<ul>\n<li>ssh 隧道</li>\n<li>IPv6 隧道</li>\n<li>各种代理</li>\n<li>VPN</li>\n<li>Goagent</li>\n<li>Tor</li>\n</ul>\n<p>现在主要用 lantern 和 ss， 踏踏实实花钱买， 省事儿。</p>\n<h1 id="reactive--fpr"><a href="#reactive--fpr" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Reactive &#x26; FPR</h1>\n<ul>\n<li>RxJava</li>\n<li>RxJS</li>\n</ul>\n<h1 id="正则表达式"><a href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>正则表达式</h1>\n<h1 id="github-pages-搭建-blog"><a href="#github-pages-%E6%90%AD%E5%BB%BA-blog" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>github pages 搭建 blog</h1>\n<ul>\n<li>Jekyll</li>\n<li>Hexo</li>\n<li>Gatsby（现在在用的）</li>\n</ul>\n<h1 id="linux"><a href="#linux" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Linux</h1>\n<ul>\n<li>fedora</li>\n<li>ubuntu</li>\n<li>系统性能诊断</li>\n<li>Shell</li>\n</ul>\n<p>最早的时候要刻四张光盘安装， 后来用 U 盘安装。</p>\n<h1 id="爬虫--搜索引擎"><a href="#%E7%88%AC%E8%99%AB--%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>爬虫 &#x26; 搜索引擎</h1>\n<ul>\n<li>Lucene</li>\n<li>Solr</li>\n<li>nutch</li>\n<li>Scrapy</li>\n</ul>\n<h1 id="算法、大数据、mlai"><a href="#%E7%AE%97%E6%B3%95%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%81mlai" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>算法、大数据、ML/AI</h1>\n<ul>\n<li>Mahout</li>\n<li>OpenCV</li>\n<li>SIFT</li>\n<li>OCR / Tesseract</li>\n<li>LeetCode</li>\n<li>ACM</li>\n<li>自然语言处理</li>\n<li>word2vec</li>\n<li>神经网络，CNN / RNN</li>\n<li>推荐， 协同过滤， 矩阵分解</li>\n<li>Bloom filter</li>\n<li>MCTS</li>\n<li>五子棋， 国际象棋</li>\n</ul>\n<h1 id="web-安全"><a href="#web-%E5%AE%89%E5%85%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Web 安全</h1>\n<ul>\n<li>XSS</li>\n<li>CSRF</li>\n<li>浏览劫持</li>\n<li>HTTPS</li>\n<li>对称加密， 非对称加密， Hash， 随机数</li>\n</ul>\n<h1 id="db"><a href="#db" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DB</h1>\n<ul>\n<li>mysql， 各种索引优化，复合索引。。。</li>\n<li>Postgrel</li>\n<li>MongoDB</li>\n<li>Memcached</li>\n<li>Redis</li>\n<li>ssdb</li>\n</ul>\n<h1 id="nodejs"><a href="#nodejs" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Node.js</h1>\n<ul>\n<li>Express</li>\n<li>Koa</li>\n<li>Egg</li>\n<li>meteor</li>\n</ul>\n<h1 id="测试"><a href="#%E6%B5%8B%E8%AF%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>测试</h1>\n<ul>\n<li>单元</li>\n<li>自动化测试</li>\n<li>截图测试</li>\n<li>Property based Testing</li>\n<li>压力测试</li>\n</ul>\n<h1 id="其他"><a href="#%E5%85%B6%E4%BB%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>其他</h1>\n<ul>\n<li>DSL</li>\n<li>Git</li>\n<li>自由职业</li>\n<li>敏捷开发</li>\n<li>重构</li>\n<li>Firebase / Clouda</li>\n<li>GTD</li>\n<li>魔术</li>\n<li>羽毛球</li>\n<li>旅游 / 摄影</li>\n<li>飞叠杯</li>\n<li>。。。。</li>\n</ul>\n<h1 id="比特币！！！"><a href="#%E6%AF%94%E7%89%B9%E5%B8%81%EF%BC%81%EF%BC%81%EF%BC%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>比特币！！！</h1>\n<p>最后， 发现自己 2011 年的时候看了一篇比特币的报道， <a href="http://www.bitecoin.com/online/2011/05/61.html">“比特币是个骗局”，吗？</a>！！！</p>\n<h1 id="总结"><a href="#%E6%80%BB%E7%BB%93" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>总结</h1>\n<p>由于东西太多了， 目前并没有整理完， 定期整理资料是一个好习惯， 删除东西真的很爽，因为删的都是自己已经了解不需要了的东西。</p>\n<p>不要只做资料收藏着， 要转化为自己的知识。</p>\n<p>另外也可以看出， 很多以前花了很多时间研究的东西， 其实早就被淘汰了， 所以很多时候我们不要太纠结技术， 而要关注解决问题本身！</p>\n<p>因为， 终究， 所有技术都会死的， 我们也是。。。</p>',timeToRead:4,excerpt:"...",fields:{slug:"/tools-used/"},frontmatter:{title:"那些年使用过的技术",date:"2018-05-18",category:"Others",tags:["杂"]}}},{node:{html:'<p>最近要做个 Desktop 软件， 当然首选 Electron， 另外最近用 Typescript 感觉很爽， 所以技术选型为 Electron + React + Typescript， 为了省事想找个 starter 脚手架， 大概找了下面这些。</p>\n<!-- more -->\n<p>------------2018-05-13 更新----------</p>\n<p>使用<a href="https://github.com/iRath96/electron-react-typescript-boilerplate">electron-react-typescript-boilerplate</a>的时候发现一个问题： 在 class 里面不能使用<code>arrow function</code>！ 比如如下代码有问题：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token comment" spellcheck="true">// import { remote } from \'electron\';</span>\n<span class="token comment" spellcheck="true">// import \'./App.css\';</span>\n\n<span class="token comment" spellcheck="true">// const electron = (window as any).require(\'electron\');</span>\n<span class="token comment" spellcheck="true">// const fs = electron.remote.require(\'fs\');</span>\n<span class="token comment" spellcheck="true">// const ipcRenderer = electron.ipcRenderer;</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ipcRenderer<span class="token punctuation">,</span> remote <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'electron\'</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ipcRenderer<span class="token punctuation">,</span> remote<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment" spellcheck="true">// console.log(fs, ipcRenderer);</span>\n\n<span class="token comment" spellcheck="true">// const logo = require(\'./logo.svg\');</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true">// state = {} as any;</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> any<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'componentDidMount \'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// handleClick() {</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'handleClick\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'magicly\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>header className<span class="token operator">=</span><span class="token string">"App-header"</span><span class="token operator">></span>\n          <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token string">"App-title"</span><span class="token operator">></span>Welcome to React<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">></span>\n        <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">"App-intro"</span><span class="token operator">></span>\n          To <span class="token keyword">get</span> started<span class="token punctuation">,</span> edit <span class="token operator">&lt;</span>code<span class="token operator">></span>src<span class="token operator">/</span>App<span class="token punctuation">.</span>tsx<span class="token operator">&lt;</span><span class="token operator">/</span>code<span class="token operator">></span> and save to reload<span class="token punctuation">.</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>\n        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span>butotn<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>点击 button 的时候会报错:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code>warning<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">33</span> Warning<span class="token punctuation">:</span> Can\'t call setState on a component that is not yet mounted<span class="token punctuation">.</span> This is a no<span class="token operator">-</span>op<span class="token punctuation">,</span> but it might indicate a bug <span class="token keyword">in</span> your application<span class="token punctuation">.</span> Instead<span class="token punctuation">,</span> assign to <span class="token template-string"><span class="token string">`this.state`</span></span> directly or define a <span class="token template-string"><span class="token string">`state = {};`</span></span> <span class="token keyword">class</span> <span class="token class-name">property</span> <span class="token keyword">with</span> the desired state <span class="token keyword">in</span> the App component<span class="token punctuation">.</span>\n</code></pre>\n      </div>\n<p>但其实这个是再正常不过的代码了啊， 在普通的<code>create-react-app</code>建的项目里面完全没有问题， 即使运行在<code>electron</code>中也是完全 ok 的。 所以决定最后还是选择<code>create-react-app</code>新建 Typescript 项目， 然后添加 electron 依赖好了。 当然这个脚手架也有好处，就是可以直接使用<code>import { ipcRenderer, remote } from \'electron\';</code>。</p>\n<p>其实后来仔细想了下， 为啥要用 electron 呢？ 相比直接网页多了什么？</p>\n<ul>\n<li>能获得更多的原生接口？</li>\n</ul>\n<p>现在 H5 的丰富接口已经完全够用， 包括 service worker 可以离线， web worker 多线程， websocket， notification 等。</p>\n<ul>\n<li>高性能？</li>\n</ul>\n<p>可以使用 WebAssembly， 并发可以用 web workers.</p>\n<ul>\n<li>接口请求跨域？</li>\n</ul>\n<p>可以通过添加 chrome 插件来支持。</p>\n<ul>\n<li>浏览器兼容性！</li>\n</ul>\n<p>对了， 这个似乎说到了重点， electron 把 node 和 chrome 打包进去了， 能保证运行环境一致， 不用再为兼容性问题头痛！</p>\n<p>总之， 如果是自己使用的项目（或者可以跟客户协商的话），其实 chrome 网页基本完全够用了， so， 先就做网页吧。</p>\n<hr>\n<h1 id="httpsgithubcomelectronelectron-quick-start"><a href="#httpsgithubcomelectronelectron-quick-start" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="https://github.com/electron/electron-quick-start">https://github.com/electron/electron-quick-start</a></h1>\n<p>electron 自己出的， 其实就是个 Hello World， 用 JS 语言， 不满足要求。</p>\n<h1 id="httpsgithubcomelectronelectron-quick-start-typescript"><a href="#httpsgithubcomelectronelectron-quick-start-typescript" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="https://github.com/electron/electron-quick-start-typescript">https://github.com/electron/electron-quick-start-typescript</a></h1>\n<p>上一个的 Typescript 版本， 只是 Hello World，不行。</p>\n<h1 id="httpsgithubcomchentsulinelectron-react-boilerplate"><a href="#httpsgithubcomchentsulinelectron-react-boilerplate" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="https://github.com/chentsulin/electron-react-boilerplate">https://github.com/chentsulin/electron-react-boilerplate</a></h1>\n<p>这个算是 stars 数比较多的一个了， 综合了 React + Redux + React Router + Webpack + HMR， 算是满足我的要求了。 Static Type Checking 用的<a href="https://flow.org/">Flow</a>， 之前也用过， 还不错， 不过感觉使用场景没有 Typescript 那么广呢， 后来决定用 TS， 所以这次也用 TS 吧。</p>\n<h1 id="httpsgithubcomirath96electron-react-typescript-boilerplate"><a href="#httpsgithubcomirath96electron-react-typescript-boilerplate" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="https://github.com/iRath96/electron-react-typescript-boilerplate">https://github.com/iRath96/electron-react-typescript-boilerplate</a></h1>\n<blockquote>\n<p>This is a slight modificiation of the great electron-react-boilerplate by chentsulin. Instead of Babel and flow this version uses TypeScript. Support for Sass has also been added.</p>\n</blockquote>\n<p>上一个的 Typescript 版本， 哎， 正好！</p>\n<h1 id="create-react-app--electron"><a href="#create-react-app--electron" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Create React App + Electron</h1>\n<p>前面的感觉都是以 Electron 为主， 然后加上一些前端技术栈。 可以反过来想， 能不能直接用<a href="https://github.com/facebook/create-react-app">CRA</a>新建项目， 然后加上 Electron 依赖呢？</p>\n<p>还真有人这样做了， 就是这篇<a href="https://medium.freecodecamp.org/building-an-electron-application-with-create-react-app-97945861647c">How to build an Electron app using create-react-app. No webpack configuration or “ejecting” necessary.</a>。</p>\n<p>大概步骤如下：</p>\n<ol>\n<li>create-react-app 新建项目（现在可以添加<code>--scripts-version=react-scripts-ts</code>创建 Typescript 项目了）</li>\n<li><code>npm i -D electron</code>，添加 electron 为依赖</li>\n<li>将<a href="https://github.com/electron/electron-quick-start">electron-quick-start</a>里的<code>main.js</code>（是 electron 的入口文件）copy 过来，可以改个名字比如<code>electron-starter.js</code></li>\n<li>修改 3 中的<code>mainWindow.loadURL</code>参数为<code>localhost:3000</code></li>\n<li>在<code>package.json</code>中添加如下内容：</li>\n</ol>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code>  <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"src/electron-starter.js"</span><span class="token punctuation">,</span>\n  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token string">"electron"</span><span class="token punctuation">:</span> <span class="token string">"electron ."</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ol start="6">\n<li>执行<code>npm start</code>然后执行<code>npm run electron</code></li>\n</ol>\n<p>这样就可以享受所有 CRA 的好处了， 如果是已经有一个 react 项目的话， 这样迁移过来是最容易的了。</p>\n<p>有两个小问题， 一是 4 中<code>mainWindow.loadURL</code>的参数， 我们指定为<code>localhost:3000</code>， 这个其实是 CRA 的开发环境的地址，如果最后正式发布的话， 应该配置<code>npm run build</code>之后的<code>index.html</code>， 可以通过环境变量控制。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token string">"electron-dev"</span><span class="token punctuation">:</span> <span class="token string">"ELECTRON_START_URL=http://localhost:3000 electron ."</span>\n</code></pre>\n      </div>\n<p>然后将<code>electron-starter.js</code>相应内容改为:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> startUrl <span class="token operator">=</span>\n  process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>ELECTRON_START_URL <span class="token operator">||</span>\n  url<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    pathname<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"/../build/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    protocol<span class="token punctuation">:</span> <span class="token string">"file:"</span><span class="token punctuation">,</span>\n    slashes<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmainWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span>startUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>还有一个问题， CRA 默认打包出来的<code>index.html</code>里面引用资源是认为放在根目录下， 所以需要在<code>package.json</code>里面配置<code>home</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token string">"homepage"</span><span class="token punctuation">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>\n</code></pre>\n      </div>\n<p>最后还有一个问题， 在我们通常写的 JS 代码里面直接 require <code>electron</code>是有问题的，可以通过如下方法解决（参看<a href="https://github.com/electron/electron/issues/7300">讨论</a>）：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> electron <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"electron"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> electron<span class="token punctuation">.</span>remote<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> ipcRenderer <span class="token operator">=</span> electron<span class="token punctuation">.</span>ipcRenderer<span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>感觉这种方式是从现有 React 项目迁移的最好方法了， 不过对 electron 的其他东西，比如打包之类的都没有涉及。</p>\n<p>这里还有更多<a href="https://electronjs.org/community#boilerplates">boilerplates</a>， 下面这几个还没有看过仅供参考：</p>\n<ul>\n<li><a href="https://github.com/emk/electron-test">https://github.com/emk/electron-test</a> ， 这个还整合了 Rust， 也是我后面可能需要的， mark 一下。</li>\n<li><a href="https://github.com/skellock/typescript-with-electron-react-kit">https://github.com/skellock/typescript-with-electron-react-kit</a></li>\n<li><a href="http://blog.scottlogic.com/2017/06/06/typescript-electron-webpack.html">http://blog.scottlogic.com/2017/06/06/typescript-electron-webpack.html</a></li>\n</ul>\n<p>下面几个 repo 也可以看一下， 作为入门 electron 资料还是很不错的：</p>\n<ul>\n<li><a href="https://github.com/electron/simple-samples">https://github.com/electron/simple-samples</a></li>\n<li><a href="https://github.com/electron/electron-api-demos">https://github.com/electron/electron-api-demos</a></li>\n<li><a href="https://github.com/hokein/electron-sample-apps">https://github.com/hokein/electron-sample-apps</a></li>\n</ul>\n<p>当然， 最完整权威的资料还是<a href="https://electronjs.org/docs">官网文档</a>了！</p>',
timeToRead:4,excerpt:"最近要做个 Desktop 软件， 当然首选 Electron， 另外最近用 Typescript 感觉很爽， 所以技术选型为 Electron + React + Typescript， 为了省事想找个 starter...",fields:{slug:"/electron-starter/"},frontmatter:{title:"Electron入门资料",date:"2018-05-12",category:"FE",tags:["electron","typescript","create react app","react"]}}},{node:{html:'<p>Node.js 里面引用 json 文件很容易， 如果是 ES5 的话， 用<code>require</code>，如果是 ES6 的话用<code>import</code>。 比如 <code>test.json</code> 文件如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">"hello"</span><span class="token operator">:</span> <span class="token string">"typescript"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>js 代码如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment" spellcheck="true">// ES5 testjson.js</span>\n<span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./test.json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment" spellcheck="true">// ES6</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> json <span class="token keyword">from</span> <span class="token string">"./test.json"</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>注意， Node9 以上才支持 ES6 的 import/export 机制， 且后缀名是<code>.mjs</code>。</p>\n<p>直接把<code>testjson.js</code>改为<code>testjson.ts</code>会报错，说<code>[ts] Cannot find module \'./test.json\'.</code>。</p>\n<h1 id="解决方案"><a href="#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>解决方案</h1>\n<p>Typescript2 支持<a href="https://www.typescriptlang.org/docs/handbook/modules.html">Wildcard module declarations</a>，很好地解决了这个问题。 添加<code>typings.d.ts</code>文件， 在里面配置：</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>declare module \'*.json\' {\n  const value: any;\n  export default value;\n}</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> json <span class="token keyword">from</span> <span class="token string">"./test.json"</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>还会报错说没有<code>hello</code>：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token punctuation">[</span>ts<span class="token punctuation">]</span> Property <span class="token string">\'hello\'</span> does not exist on type <span class="token string">\'typeof \'</span><span class="token operator">*</span><span class="token punctuation">.</span>json<span class="token string">\'\'</span><span class="token punctuation">.</span>\nany\n</code></pre>\n      </div>\n<p>可以做一次 any 转换即可：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> json <span class="token keyword">from</span> <span class="token string">\'./test.json\'</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>json <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h1 id="参考资料"><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>参考资料</h1>\n<ul>\n<li><a href="https://hackernoon.com/import-json-into-typescript-8d465beded79">https://hackernoon.com/import-json-into-typescript-8d465beded79</a></li>\n</ul>',timeToRead:1,excerpt:"Node.js 里面引用 json 文件很容易， 如果是 ES5 的话， 用 ，如果是 ES6 的话用 。 比如   文件如下： js 代码如下： 注意， Node9 以上才支持 ES6 的 import/export...",fields:{slug:"/typescript-import-json/"},frontmatter:{title:"Typescript如何import json文件",date:"2018-04-26",category:"FE",tags:["Typescript","json"]}}}]}},pathContext:{current:1,skip:0,total:6}}}});
//# sourceMappingURL=path---index-c1a31873431fc3361fb3.js.map